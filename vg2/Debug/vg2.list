
vg2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08002f64  08002f64  00003f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003794  08003794  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003794  08003794  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003794  08003794  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003794  08003794  00004794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800379c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  2000000c  080037a8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  080037a8  0000580c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc4c  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002452  00000000  00000000  00012c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  000150d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d5  00000000  00000000  00015da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1c7  00000000  00000000  0001677d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010305  00000000  00000000  00030944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000959ba  00000000  00000000  00040c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d68  00000000  00000000  000d6648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d93b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f4c 	.word	0x08002f4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f4c 	.word	0x08002f4c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fe0b 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83b 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f98b 	bl	8000548 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000232:	f000 f8e1 	bl	80003f8 <MX_SPI2_Init>
  MX_TSC_Init();
 8000236:	f000 f91d 	bl	8000474 <MX_TSC_Init>
  MX_USB_PCD_Init();
 800023a:	f000 f95f 	bl	80004fc <MX_USB_PCD_Init>
  MX_I2C1_Init();
 800023e:	f000 f89b 	bl	8000378 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 8000242:	f000 fa55 	bl	80006f0 <ssd1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ssd1306_Fill(White);
 8000246:	2001      	movs	r0, #1
 8000248:	f000 fabe 	bl	80007c8 <ssd1306_Fill>
      ssd1306_DrawBitmap(0,0,image_data_demo_smiley,128,64,Black);
 800024c:	4a13      	ldr	r2, [pc, #76]	@ (800029c <main+0x7c>)
 800024e:	2300      	movs	r3, #0
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	2340      	movs	r3, #64	@ 0x40
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	2380      	movs	r3, #128	@ 0x80
 8000258:	2100      	movs	r1, #0
 800025a:	2000      	movs	r0, #0
 800025c:	f000 fb5e 	bl	800091c <ssd1306_DrawBitmap>
      ssd1306_UpdateScreen();
 8000260:	f000 facc 	bl	80007fc <ssd1306_UpdateScreen>
      HAL_Delay(500);
 8000264:	23fa      	movs	r3, #250	@ 0xfa
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fe4d 	bl	8000f08 <HAL_Delay>
      ssd1306_Fill(Black);
 800026e:	2000      	movs	r0, #0
 8000270:	f000 faaa 	bl	80007c8 <ssd1306_Fill>
      ssd1306_DrawBitmap(0,0,image_data_demo_angry,128,64,White);
 8000274:	4a0a      	ldr	r2, [pc, #40]	@ (80002a0 <main+0x80>)
 8000276:	2301      	movs	r3, #1
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	2340      	movs	r3, #64	@ 0x40
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2380      	movs	r3, #128	@ 0x80
 8000280:	2100      	movs	r1, #0
 8000282:	2000      	movs	r0, #0
 8000284:	f000 fb4a 	bl	800091c <ssd1306_DrawBitmap>
      ssd1306_UpdateScreen();
 8000288:	f000 fab8 	bl	80007fc <ssd1306_UpdateScreen>
      HAL_Delay(500);
 800028c:	23fa      	movs	r3, #250	@ 0xfa
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fe39 	bl	8000f08 <HAL_Delay>
	  ssd1306_Fill(White);
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	e7d5      	b.n	8000246 <main+0x26>
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	08002f64 	.word	0x08002f64
 80002a0:	08003364 	.word	0x08003364

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b099      	sub	sp, #100	@ 0x64
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	242c      	movs	r4, #44	@ 0x2c
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	2334      	movs	r3, #52	@ 0x34
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f002 fe1d 	bl	8002ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	231c      	movs	r3, #28
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	0018      	movs	r0, r3
 80002c0:	2310      	movs	r3, #16
 80002c2:	001a      	movs	r2, r3
 80002c4:	2100      	movs	r1, #0
 80002c6:	f002 fe15 	bl	8002ef4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ca:	003b      	movs	r3, r7
 80002cc:	0018      	movs	r0, r3
 80002ce:	231c      	movs	r3, #28
 80002d0:	001a      	movs	r2, r3
 80002d2:	2100      	movs	r1, #0
 80002d4:	f002 fe0e 	bl	8002ef4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80002d8:	0021      	movs	r1, r4
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2222      	movs	r2, #34	@ 0x22
 80002de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2201      	movs	r2, #1
 80002e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2201      	movs	r2, #1
 80002ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2210      	movs	r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2280      	movs	r2, #128	@ 0x80
 80002fc:	0212      	lsls	r2, r2, #8
 80002fe:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2280      	movs	r2, #128	@ 0x80
 8000304:	0352      	lsls	r2, r2, #13
 8000306:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	187b      	adds	r3, r7, r1
 8000310:	0018      	movs	r0, r3
 8000312:	f001 fe8b 	bl	800202c <HAL_RCC_OscConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800031a:	f000 f9a9 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	211c      	movs	r1, #28
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2207      	movs	r2, #7
 8000324:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2101      	movs	r1, #1
 800033c:	0018      	movs	r0, r3
 800033e:	f002 f9fb 	bl	8002738 <HAL_RCC_ClockConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000346:	f000 f993 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800034a:	003b      	movs	r3, r7
 800034c:	4a09      	ldr	r2, [pc, #36]	@ (8000374 <SystemClock_Config+0xd0>)
 800034e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000356:	003b      	movs	r3, r7
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035c:	003b      	movs	r3, r7
 800035e:	0018      	movs	r0, r3
 8000360:	f002 fb36 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000368:	f000 f982 	bl	8000670 <Error_Handler>
  }
}
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b019      	add	sp, #100	@ 0x64
 8000372:	bd90      	pop	{r4, r7, pc}
 8000374:	00020020 	.word	0x00020020

08000378 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <MX_I2C1_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	@ (80003f0 <MX_I2C1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8000382:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <MX_I2C1_Init+0x74>)
 8000384:	4a1b      	ldr	r2, [pc, #108]	@ (80003f4 <MX_I2C1_Init+0x7c>)
 8000386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_I2C1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <MX_I2C1_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800039a:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_I2C1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a6:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 f815 	bl	80013e4 <HAL_I2C_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003be:	f000 f957 	bl	8000670 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c2:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003c4:	2100      	movs	r1, #0
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 fc7a 	bl	8001cc0 <HAL_I2CEx_ConfigAnalogFilter>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d0:	f000 f94e 	bl	8000670 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003d6:	2100      	movs	r1, #0
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fcbd 	bl	8001d58 <HAL_I2CEx_ConfigDigitalFilter>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003e2:	f000 f945 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000028 	.word	0x20000028
 80003f0:	40005400 	.word	0x40005400
 80003f4:	0010020a 	.word	0x0010020a

080003f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	@ (800046c <MX_SPI2_Init+0x74>)
 80003fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000470 <MX_SPI2_Init+0x78>)
 8000400:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000402:	4b1a      	ldr	r3, [pc, #104]	@ (800046c <MX_SPI2_Init+0x74>)
 8000404:	2282      	movs	r2, #130	@ 0x82
 8000406:	0052      	lsls	r2, r2, #1
 8000408:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800040a:	4b18      	ldr	r3, [pc, #96]	@ (800046c <MX_SPI2_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000410:	4b16      	ldr	r3, [pc, #88]	@ (800046c <MX_SPI2_Init+0x74>)
 8000412:	22c0      	movs	r2, #192	@ 0xc0
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_SPI2_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800041e:	4b13      	ldr	r3, [pc, #76]	@ (800046c <MX_SPI2_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000424:	4b11      	ldr	r3, [pc, #68]	@ (800046c <MX_SPI2_Init+0x74>)
 8000426:	2280      	movs	r2, #128	@ 0x80
 8000428:	0092      	lsls	r2, r2, #2
 800042a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800042c:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <MX_SPI2_Init+0x74>)
 800042e:	2208      	movs	r2, #8
 8000430:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <MX_SPI2_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <MX_SPI2_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800043e:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <MX_SPI2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000444:	4b09      	ldr	r3, [pc, #36]	@ (800046c <MX_SPI2_Init+0x74>)
 8000446:	2207      	movs	r2, #7
 8000448:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800044a:	4b08      	ldr	r3, [pc, #32]	@ (800046c <MX_SPI2_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <MX_SPI2_Init+0x74>)
 8000452:	2208      	movs	r2, #8
 8000454:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000456:	4b05      	ldr	r3, [pc, #20]	@ (800046c <MX_SPI2_Init+0x74>)
 8000458:	0018      	movs	r0, r3
 800045a:	f002 fbb7 	bl	8002bcc <HAL_SPI_Init>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000462:	f000 f905 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000007c 	.word	0x2000007c
 8000470:	40003800 	.word	0x40003800

08000474 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000478:	4b1e      	ldr	r3, [pc, #120]	@ (80004f4 <MX_TSC_Init+0x80>)
 800047a:	4a1f      	ldr	r2, [pc, #124]	@ (80004f8 <MX_TSC_Init+0x84>)
 800047c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800047e:	4b1d      	ldr	r3, [pc, #116]	@ (80004f4 <MX_TSC_Init+0x80>)
 8000480:	2280      	movs	r2, #128	@ 0x80
 8000482:	0552      	lsls	r2, r2, #21
 8000484:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000486:	4b1b      	ldr	r3, [pc, #108]	@ (80004f4 <MX_TSC_Init+0x80>)
 8000488:	2280      	movs	r2, #128	@ 0x80
 800048a:	0452      	lsls	r2, r2, #17
 800048c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800048e:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <MX_TSC_Init+0x80>)
 8000490:	2200      	movs	r2, #0
 8000492:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000494:	4b17      	ldr	r3, [pc, #92]	@ (80004f4 <MX_TSC_Init+0x80>)
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800049a:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <MX_TSC_Init+0x80>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 80004a0:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004a2:	2280      	movs	r2, #128	@ 0x80
 80004a4:	0192      	lsls	r2, r2, #6
 80004a6:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 80004a8:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004aa:	22a0      	movs	r2, #160	@ 0xa0
 80004ac:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 80004ae:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	@ 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	@ 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004c2:	222c      	movs	r2, #44	@ 0x2c
 80004c4:	2100      	movs	r1, #0
 80004c6:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004ca:	2291      	movs	r2, #145	@ 0x91
 80004cc:	0092      	lsls	r2, r2, #2
 80004ce:	631a      	str	r2, [r3, #48]	@ 0x30
  htsc.Init.ShieldIOs = 0;
 80004d0:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	635a      	str	r2, [r3, #52]	@ 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004d8:	2291      	movs	r2, #145	@ 0x91
 80004da:	00d2      	lsls	r2, r2, #3
 80004dc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80004de:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <MX_TSC_Init+0x80>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f002 fc2b 	bl	8002d3c <HAL_TSC_Init>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80004ea:	f000 f8c1 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000e0 	.word	0x200000e0
 80004f8:	40024000 	.word	0x40024000

080004fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000500:	4b0f      	ldr	r3, [pc, #60]	@ (8000540 <MX_USB_PCD_Init+0x44>)
 8000502:	4a10      	ldr	r2, [pc, #64]	@ (8000544 <MX_USB_PCD_Init+0x48>)
 8000504:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000506:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <MX_USB_PCD_Init+0x44>)
 8000508:	2208      	movs	r2, #8
 800050a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <MX_USB_PCD_Init+0x44>)
 800050e:	2202      	movs	r2, #2
 8000510:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <MX_USB_PCD_Init+0x44>)
 8000514:	2202      	movs	r2, #2
 8000516:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <MX_USB_PCD_Init+0x44>)
 800051a:	2200      	movs	r2, #0
 800051c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <MX_USB_PCD_Init+0x44>)
 8000520:	2200      	movs	r2, #0
 8000522:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <MX_USB_PCD_Init+0x44>)
 8000526:	2200      	movs	r2, #0
 8000528:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800052a:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <MX_USB_PCD_Init+0x44>)
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fc5f 	bl	8001df0 <HAL_PCD_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000536:	f000 f89b 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000124 	.word	0x20000124
 8000544:	40005c00 	.word	0x40005c00

08000548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b089      	sub	sp, #36	@ 0x24
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	240c      	movs	r4, #12
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2314      	movs	r3, #20
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f002 fccb 	bl	8002ef4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055e:	4b40      	ldr	r3, [pc, #256]	@ (8000660 <MX_GPIO_Init+0x118>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b3f      	ldr	r3, [pc, #252]	@ (8000660 <MX_GPIO_Init+0x118>)
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	0309      	lsls	r1, r1, #12
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b3c      	ldr	r3, [pc, #240]	@ (8000660 <MX_GPIO_Init+0x118>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	031b      	lsls	r3, r3, #12
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b39      	ldr	r3, [pc, #228]	@ (8000660 <MX_GPIO_Init+0x118>)
 800057c:	695a      	ldr	r2, [r3, #20]
 800057e:	4b38      	ldr	r3, [pc, #224]	@ (8000660 <MX_GPIO_Init+0x118>)
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	0289      	lsls	r1, r1, #10
 8000584:	430a      	orrs	r2, r1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	4b35      	ldr	r3, [pc, #212]	@ (8000660 <MX_GPIO_Init+0x118>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	4013      	ands	r3, r2
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	4b32      	ldr	r3, [pc, #200]	@ (8000660 <MX_GPIO_Init+0x118>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b31      	ldr	r3, [pc, #196]	@ (8000660 <MX_GPIO_Init+0x118>)
 800059c:	2180      	movs	r1, #128	@ 0x80
 800059e:	02c9      	lsls	r1, r1, #11
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <MX_GPIO_Init+0x118>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	@ 0x80
 80005aa:	02db      	lsls	r3, r3, #11
 80005ac:	4013      	ands	r3, r2
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80005b2:	492c      	ldr	r1, [pc, #176]	@ (8000664 <MX_GPIO_Init+0x11c>)
 80005b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <MX_GPIO_Init+0x120>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fef5 	bl	80013a8 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	4a28      	ldr	r2, [pc, #160]	@ (8000664 <MX_GPIO_Init+0x11c>)
 80005c2:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2201      	movs	r2, #1
 80005c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	4a23      	ldr	r2, [pc, #140]	@ (8000668 <MX_GPIO_Init+0x120>)
 80005da:	0019      	movs	r1, r3
 80005dc:	0010      	movs	r0, r2
 80005de:	f000 fd6b 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80005e2:	0021      	movs	r1, r4
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2206      	movs	r2, #6
 80005e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2290      	movs	r2, #144	@ 0x90
 80005ee:	0352      	lsls	r2, r2, #13
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	000c      	movs	r4, r1
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <MX_GPIO_Init+0x120>)
 80005fe:	0019      	movs	r1, r3
 8000600:	0010      	movs	r0, r2
 8000602:	f000 fd59 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800060c:	193b      	adds	r3, r7, r4
 800060e:	2290      	movs	r2, #144	@ 0x90
 8000610:	0352      	lsls	r2, r2, #13
 8000612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061a:	193a      	adds	r2, r7, r4
 800061c:	2390      	movs	r3, #144	@ 0x90
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 fd48 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000628:	0021      	movs	r1, r4
 800062a:	187b      	adds	r3, r7, r1
 800062c:	22c0      	movs	r2, #192	@ 0xc0
 800062e:	0112      	lsls	r2, r2, #4
 8000630:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2212      	movs	r2, #18
 8000636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2203      	movs	r2, #3
 8000642:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2201      	movs	r2, #1
 8000648:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	187b      	adds	r3, r7, r1
 800064c:	4a07      	ldr	r2, [pc, #28]	@ (800066c <MX_GPIO_Init+0x124>)
 800064e:	0019      	movs	r1, r3
 8000650:	0010      	movs	r0, r2
 8000652:	f000 fd31 	bl	80010b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b009      	add	sp, #36	@ 0x24
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	40021000 	.word	0x40021000
 8000664:	000003e1 	.word	0x000003e1
 8000668:	48000800 	.word	0x48000800
 800066c:	48000400 	.word	0x48000400

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	e7fd      	b.n	8000678 <Error_Handler+0x8>

0800067c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	0002      	movs	r2, r0
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000694:	4808      	ldr	r0, [pc, #32]	@ (80006b8 <ssd1306_WriteCommand+0x30>)
 8000696:	2301      	movs	r3, #1
 8000698:	425b      	negs	r3, r3
 800069a:	9302      	str	r3, [sp, #8]
 800069c:	2301      	movs	r3, #1
 800069e:	9301      	str	r3, [sp, #4]
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	2200      	movs	r2, #0
 80006a8:	217a      	movs	r1, #122	@ 0x7a
 80006aa:	f000 ff41 	bl	8001530 <HAL_I2C_Mem_Write>
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	20000028 	.word	0x20000028

080006bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4808      	ldr	r0, [pc, #32]	@ (80006ec <ssd1306_WriteData+0x30>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	4252      	negs	r2, r2
 80006d0:	9202      	str	r2, [sp, #8]
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2301      	movs	r3, #1
 80006da:	2240      	movs	r2, #64	@ 0x40
 80006dc:	217a      	movs	r1, #122	@ 0x7a
 80006de:	f000 ff27 	bl	8001530 <HAL_I2C_Mem_Write>
}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	20000028 	.word	0x20000028

080006f0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80006f4:	f7ff ffc2 	bl	800067c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80006f8:	2064      	movs	r0, #100	@ 0x64
 80006fa:	f000 fc05 	bl	8000f08 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 f9b2 	bl	8000a68 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000704:	2020      	movs	r0, #32
 8000706:	f7ff ffbf 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff ffbc 	bl	8000688 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000710:	20b0      	movs	r0, #176	@ 0xb0
 8000712:	f7ff ffb9 	bl	8000688 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000716:	20c8      	movs	r0, #200	@ 0xc8
 8000718:	f7ff ffb6 	bl	8000688 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ffb3 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000722:	2010      	movs	r0, #16
 8000724:	f7ff ffb0 	bl	8000688 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000728:	2040      	movs	r0, #64	@ 0x40
 800072a:	f7ff ffad 	bl	8000688 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800072e:	20ff      	movs	r0, #255	@ 0xff
 8000730:	f000 f982 	bl	8000a38 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000734:	20a1      	movs	r0, #161	@ 0xa1
 8000736:	f7ff ffa7 	bl	8000688 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800073a:	20a6      	movs	r0, #166	@ 0xa6
 800073c:	f7ff ffa4 	bl	8000688 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000740:	20a8      	movs	r0, #168	@ 0xa8
 8000742:	f7ff ffa1 	bl	8000688 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000746:	203f      	movs	r0, #63	@ 0x3f
 8000748:	f7ff ff9e 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800074c:	20a4      	movs	r0, #164	@ 0xa4
 800074e:	f7ff ff9b 	bl	8000688 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000752:	20d3      	movs	r0, #211	@ 0xd3
 8000754:	f7ff ff98 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff ff95 	bl	8000688 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800075e:	20d5      	movs	r0, #213	@ 0xd5
 8000760:	f7ff ff92 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000764:	20f0      	movs	r0, #240	@ 0xf0
 8000766:	f7ff ff8f 	bl	8000688 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800076a:	20d9      	movs	r0, #217	@ 0xd9
 800076c:	f7ff ff8c 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000770:	2022      	movs	r0, #34	@ 0x22
 8000772:	f7ff ff89 	bl	8000688 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000776:	20da      	movs	r0, #218	@ 0xda
 8000778:	f7ff ff86 	bl	8000688 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800077c:	2012      	movs	r0, #18
 800077e:	f7ff ff83 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000782:	20db      	movs	r0, #219	@ 0xdb
 8000784:	f7ff ff80 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000788:	2020      	movs	r0, #32
 800078a:	f7ff ff7d 	bl	8000688 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800078e:	208d      	movs	r0, #141	@ 0x8d
 8000790:	f7ff ff7a 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000794:	2014      	movs	r0, #20
 8000796:	f7ff ff77 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800079a:	2001      	movs	r0, #1
 800079c:	f000 f964 	bl	8000a68 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 f811 	bl	80007c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80007a6:	f000 f829 	bl	80007fc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <ssd1306_Init+0xd4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <ssd1306_Init+0xd4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80007b6:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <ssd1306_Init+0xd4>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	711a      	strb	r2, [r3, #4]
}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	20000800 	.word	0x20000800

080007c8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	0002      	movs	r2, r0
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d101      	bne.n	80007e0 <ssd1306_Fill+0x18>
 80007dc:	2300      	movs	r3, #0
 80007de:	e000      	b.n	80007e2 <ssd1306_Fill+0x1a>
 80007e0:	23ff      	movs	r3, #255	@ 0xff
 80007e2:	2280      	movs	r2, #128	@ 0x80
 80007e4:	00d2      	lsls	r2, r2, #3
 80007e6:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <ssd1306_Fill+0x30>)
 80007e8:	0019      	movs	r1, r3
 80007ea:	f002 fb83 	bl	8002ef4 <memset>
}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	20000400 	.word	0x20000400

080007fc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e01a      	b.n	8000840 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	3b50      	subs	r3, #80	@ 0x50
 8000810:	b2db      	uxtb	r3, r3
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff ff38 	bl	8000688 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff ff35 	bl	8000688 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800081e:	2010      	movs	r0, #16
 8000820:	f7ff ff32 	bl	8000688 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	01da      	lsls	r2, r3, #7
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <ssd1306_UpdateScreen+0x58>)
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	2180      	movs	r1, #128	@ 0x80
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff ff43 	bl	80006bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	3201      	adds	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b07      	cmp	r3, #7
 8000846:	d9e0      	bls.n	800080a <ssd1306_UpdateScreen+0xe>
    }
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	20000400 	.word	0x20000400

08000858 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	0004      	movs	r4, r0
 8000860:	0008      	movs	r0, r1
 8000862:	0011      	movs	r1, r2
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	1c22      	adds	r2, r4, #0
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	1dbb      	adds	r3, r7, #6
 800086c:	1c02      	adds	r2, r0, #0
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	1d7b      	adds	r3, r7, #5
 8000872:	1c0a      	adds	r2, r1, #0
 8000874:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b25b      	sxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	db47      	blt.n	8000910 <ssd1306_DrawPixel+0xb8>
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b3f      	cmp	r3, #63	@ 0x3f
 8000886:	d843      	bhi.n	8000910 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000888:	1d7b      	adds	r3, r7, #5
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d11e      	bne.n	80008ce <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	1dbb      	adds	r3, r7, #6
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	08db      	lsrs	r3, r3, #3
 800089a:	b2d8      	uxtb	r0, r3
 800089c:	0003      	movs	r3, r0
 800089e:	01db      	lsls	r3, r3, #7
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000918 <ssd1306_DrawPixel+0xc0>)
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	b25a      	sxtb	r2, r3
 80008a8:	1dbb      	adds	r3, r7, #6
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2107      	movs	r1, #7
 80008ae:	400b      	ands	r3, r1
 80008b0:	2101      	movs	r1, #1
 80008b2:	4099      	lsls	r1, r3
 80008b4:	000b      	movs	r3, r1
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b259      	sxtb	r1, r3
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	0003      	movs	r3, r0
 80008c2:	01db      	lsls	r3, r3, #7
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	b2c9      	uxtb	r1, r1
 80008c8:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <ssd1306_DrawPixel+0xc0>)
 80008ca:	54d1      	strb	r1, [r2, r3]
 80008cc:	e021      	b.n	8000912 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	1dbb      	adds	r3, r7, #6
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	08db      	lsrs	r3, r3, #3
 80008d8:	b2d8      	uxtb	r0, r3
 80008da:	0003      	movs	r3, r0
 80008dc:	01db      	lsls	r3, r3, #7
 80008de:	18d3      	adds	r3, r2, r3
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <ssd1306_DrawPixel+0xc0>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	1dba      	adds	r2, r7, #6
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	2107      	movs	r1, #7
 80008ec:	400a      	ands	r2, r1
 80008ee:	2101      	movs	r1, #1
 80008f0:	4091      	lsls	r1, r2
 80008f2:	000a      	movs	r2, r1
 80008f4:	b252      	sxtb	r2, r2
 80008f6:	43d2      	mvns	r2, r2
 80008f8:	b252      	sxtb	r2, r2
 80008fa:	4013      	ands	r3, r2
 80008fc:	b259      	sxtb	r1, r3
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	0003      	movs	r3, r0
 8000904:	01db      	lsls	r3, r3, #7
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	b2c9      	uxtb	r1, r1
 800090a:	4a03      	ldr	r2, [pc, #12]	@ (8000918 <ssd1306_DrawPixel+0xc0>)
 800090c:	54d1      	strb	r1, [r2, r3]
 800090e:	e000      	b.n	8000912 <ssd1306_DrawPixel+0xba>
        return;
 8000910:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000912:	46bd      	mov	sp, r7
 8000914:	b003      	add	sp, #12
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	20000400 	.word	0x20000400

0800091c <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	0004      	movs	r4, r0
 8000924:	0008      	movs	r0, r1
 8000926:	603a      	str	r2, [r7, #0]
 8000928:	0019      	movs	r1, r3
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	1c22      	adds	r2, r4, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	1c02      	adds	r2, r0, #0
 8000934:	701a      	strb	r2, [r3, #0]
 8000936:	1d7b      	adds	r3, r7, #5
 8000938:	1c0a      	adds	r2, r1, #0
 800093a:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800093c:	1d7b      	adds	r3, r7, #5
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3307      	adds	r3, #7
 8000942:	2b00      	cmp	r3, #0
 8000944:	da00      	bge.n	8000948 <ssd1306_DrawBitmap+0x2c>
 8000946:	3307      	adds	r3, #7
 8000948:	10db      	asrs	r3, r3, #3
 800094a:	001a      	movs	r2, r3
 800094c:	230a      	movs	r3, #10
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8000952:	230f      	movs	r3, #15
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	db65      	blt.n	8000a30 <ssd1306_DrawBitmap+0x114>
 8000964:	1dbb      	adds	r3, r7, #6
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b3f      	cmp	r3, #63	@ 0x3f
 800096a:	d861      	bhi.n	8000a30 <ssd1306_DrawBitmap+0x114>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800096c:	230e      	movs	r3, #14
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e053      	b.n	8000a1e <ssd1306_DrawBitmap+0x102>
        for (uint8_t i = 0; i < w; i++) {
 8000976:	230d      	movs	r3, #13
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e03c      	b.n	80009fa <ssd1306_DrawBitmap+0xde>
            if (i & 7) {
 8000980:	230d      	movs	r3, #13
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2207      	movs	r2, #7
 8000988:	4013      	ands	r3, r2
 800098a:	d006      	beq.n	800099a <ssd1306_DrawBitmap+0x7e>
                byte <<= 1;
 800098c:	230f      	movs	r3, #15
 800098e:	18fa      	adds	r2, r7, r3
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	18db      	adds	r3, r3, r3
 8000996:	7013      	strb	r3, [r2, #0]
 8000998:	e014      	b.n	80009c4 <ssd1306_DrawBitmap+0xa8>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800099a:	230e      	movs	r3, #14
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	220a      	movs	r2, #10
 80009a2:	18ba      	adds	r2, r7, r2
 80009a4:	2100      	movs	r1, #0
 80009a6:	5e52      	ldrsh	r2, [r2, r1]
 80009a8:	4353      	muls	r3, r2
 80009aa:	220d      	movs	r2, #13
 80009ac:	18ba      	adds	r2, r7, r2
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	08d2      	lsrs	r2, r2, #3
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	189b      	adds	r3, r3, r2
 80009b6:	001a      	movs	r2, r3
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	189a      	adds	r2, r3, r2
 80009bc:	230f      	movs	r3, #15
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fb      	adds	r3, r7, r3
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	da0e      	bge.n	80009ee <ssd1306_DrawBitmap+0xd2>
                ssd1306_DrawPixel(x + i, y, color);
 80009d0:	1dfa      	adds	r2, r7, #7
 80009d2:	230d      	movs	r3, #13
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	7812      	ldrb	r2, [r2, #0]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	b2d8      	uxtb	r0, r3
 80009de:	2324      	movs	r3, #36	@ 0x24
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	0019      	movs	r1, r3
 80009ea:	f7ff ff35 	bl	8000858 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80009ee:	210d      	movs	r1, #13
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	3201      	adds	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	230d      	movs	r3, #13
 80009fc:	18fa      	adds	r2, r7, r3
 80009fe:	1d7b      	adds	r3, r7, #5
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d3bb      	bcc.n	8000980 <ssd1306_DrawBitmap+0x64>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000a08:	210e      	movs	r1, #14
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	3201      	adds	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	1dbb      	adds	r3, r7, #6
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	1dbb      	adds	r3, r7, #6
 8000a1a:	3201      	adds	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
 8000a1e:	230e      	movs	r3, #14
 8000a20:	18fa      	adds	r2, r7, r3
 8000a22:	2320      	movs	r3, #32
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d3a3      	bcc.n	8000976 <ssd1306_DrawBitmap+0x5a>
            }
        }
    }
    return;
 8000a2e:	e000      	b.n	8000a32 <ssd1306_DrawBitmap+0x116>
        return;
 8000a30:	46c0      	nop			@ (mov r8, r8)
}
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b005      	add	sp, #20
 8000a36:	bd90      	pop	{r4, r7, pc}

08000a38 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000a44:	210f      	movs	r1, #15
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2281      	movs	r2, #129	@ 0x81
 8000a4a:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fe19 	bl	8000688 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f7ff fe14 	bl	8000688 <ssd1306_WriteCommand>
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b004      	add	sp, #16
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	0002      	movs	r2, r0
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d007      	beq.n	8000a8c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	22af      	movs	r2, #175	@ 0xaf
 8000a82:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <ssd1306_SetDisplayOn+0x48>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	715a      	strb	r2, [r3, #5]
 8000a8a:	e006      	b.n	8000a9a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000a8c:	230f      	movs	r3, #15
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	22ae      	movs	r2, #174	@ 0xae
 8000a92:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <ssd1306_SetDisplayOn+0x48>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fdf1 	bl	8000688 <ssd1306_WriteCommand>
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	20000800 	.word	0x20000800

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <HAL_MspInit+0x44>)
 8000abc:	699a      	ldr	r2, [r3, #24]
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	619a      	str	r2, [r3, #24]
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	2201      	movs	r2, #1
 8000acc:	4013      	ands	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	69da      	ldr	r2, [r3, #28]
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	2180      	movs	r1, #128	@ 0x80
 8000ada:	0549      	lsls	r1, r1, #21
 8000adc:	430a      	orrs	r2, r1
 8000ade:	61da      	str	r2, [r3, #28]
 8000ae0:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ae2:	69da      	ldr	r2, [r3, #28]
 8000ae4:	2380      	movs	r3, #128	@ 0x80
 8000ae6:	055b      	lsls	r3, r3, #21
 8000ae8:	4013      	ands	r3, r2
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08b      	sub	sp, #44	@ 0x2c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	2414      	movs	r4, #20
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	0018      	movs	r0, r3
 8000b0a:	2314      	movs	r3, #20
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f002 f9f0 	bl	8002ef4 <memset>
  if(hi2c->Instance==I2C1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1c      	ldr	r2, [pc, #112]	@ (8000b8c <HAL_I2C_MspInit+0x90>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d131      	bne.n	8000b82 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b24:	2180      	movs	r1, #128	@ 0x80
 8000b26:	02c9      	lsls	r1, r1, #11
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b2e:	695a      	ldr	r2, [r3, #20]
 8000b30:	2380      	movs	r3, #128	@ 0x80
 8000b32:	02db      	lsls	r3, r3, #11
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b3a:	0021      	movs	r1, r4
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	22c0      	movs	r2, #192	@ 0xc0
 8000b40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2212      	movs	r2, #18
 8000b46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2203      	movs	r2, #3
 8000b52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2201      	movs	r2, #1
 8000b58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <HAL_I2C_MspInit+0x98>)
 8000b5e:	0019      	movs	r1, r3
 8000b60:	0010      	movs	r0, r2
 8000b62:	f000 faa9 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b68:	69da      	ldr	r2, [r3, #28]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b6c:	2180      	movs	r1, #128	@ 0x80
 8000b6e:	0389      	lsls	r1, r1, #14
 8000b70:	430a      	orrs	r2, r1
 8000b72:	61da      	str	r2, [r3, #28]
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_I2C_MspInit+0x94>)
 8000b76:	69da      	ldr	r2, [r3, #28]
 8000b78:	2380      	movs	r3, #128	@ 0x80
 8000b7a:	039b      	lsls	r3, r3, #14
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b00b      	add	sp, #44	@ 0x2c
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000400 	.word	0x48000400

08000b98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b08b      	sub	sp, #44	@ 0x2c
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	2414      	movs	r4, #20
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f002 f9a2 	bl	8002ef4 <memset>
  if(hspi->Instance==SPI2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <HAL_SPI_MspInit+0x90>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d132      	bne.n	8000c20 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <HAL_SPI_MspInit+0x94>)
 8000bbc:	69da      	ldr	r2, [r3, #28]
 8000bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <HAL_SPI_MspInit+0x94>)
 8000bc0:	2180      	movs	r1, #128	@ 0x80
 8000bc2:	01c9      	lsls	r1, r1, #7
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	61da      	str	r2, [r3, #28]
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_SPI_MspInit+0x94>)
 8000bca:	69da      	ldr	r2, [r3, #28]
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	01db      	lsls	r3, r3, #7
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <HAL_SPI_MspInit+0x94>)
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_SPI_MspInit+0x94>)
 8000bdc:	2180      	movs	r1, #128	@ 0x80
 8000bde:	02c9      	lsls	r1, r1, #11
 8000be0:	430a      	orrs	r2, r1
 8000be2:	615a      	str	r2, [r3, #20]
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_SPI_MspInit+0x94>)
 8000be6:	695a      	ldr	r2, [r3, #20]
 8000be8:	2380      	movs	r3, #128	@ 0x80
 8000bea:	02db      	lsls	r3, r3, #11
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	22e0      	movs	r2, #224	@ 0xe0
 8000bf6:	0212      	lsls	r2, r2, #8
 8000bf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2202      	movs	r2, #2
 8000c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <HAL_SPI_MspInit+0x98>)
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0010      	movs	r0, r2
 8000c1c:	f000 fa4c 	bl	80010b8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b00b      	add	sp, #44	@ 0x2c
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	40003800 	.word	0x40003800
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000400 	.word	0x48000400

08000c34 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b08b      	sub	sp, #44	@ 0x2c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	2414      	movs	r4, #20
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	0018      	movs	r0, r3
 8000c42:	2314      	movs	r3, #20
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f002 f954 	bl	8002ef4 <memset>
  if(htsc->Instance==TSC)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a44      	ldr	r2, [pc, #272]	@ (8000d64 <HAL_TSC_MspInit+0x130>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d000      	beq.n	8000c58 <HAL_TSC_MspInit+0x24>
 8000c56:	e080      	b.n	8000d5a <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000c58:	4b43      	ldr	r3, [pc, #268]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000c5a:	695a      	ldr	r2, [r3, #20]
 8000c5c:	4b42      	ldr	r3, [pc, #264]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000c5e:	2180      	movs	r1, #128	@ 0x80
 8000c60:	0449      	lsls	r1, r1, #17
 8000c62:	430a      	orrs	r2, r1
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	4b40      	ldr	r3, [pc, #256]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	045b      	lsls	r3, r3, #17
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	4b3b      	ldr	r3, [pc, #236]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000c7a:	2180      	movs	r1, #128	@ 0x80
 8000c7c:	0289      	lsls	r1, r1, #10
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	2380      	movs	r3, #128	@ 0x80
 8000c88:	029b      	lsls	r3, r3, #10
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	4b34      	ldr	r3, [pc, #208]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	02c9      	lsls	r1, r1, #11
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	615a      	str	r2, [r3, #20]
 8000c9e:	4b32      	ldr	r3, [pc, #200]	@ (8000d68 <HAL_TSC_MspInit+0x134>)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	02db      	lsls	r3, r3, #11
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2244      	movs	r2, #68	@ 0x44
 8000cb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	193a      	adds	r2, r7, r4
 8000ccc:	2390      	movs	r3, #144	@ 0x90
 8000cce:	05db      	lsls	r3, r3, #23
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 f9f0 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2288      	movs	r2, #136	@ 0x88
 8000cdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2212      	movs	r2, #18
 8000ce2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	193a      	adds	r2, r7, r4
 8000cf8:	2390      	movs	r3, #144	@ 0x90
 8000cfa:	05db      	lsls	r3, r3, #23
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 f9da 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2203      	movs	r2, #3
 8000d20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	4a11      	ldr	r2, [pc, #68]	@ (8000d6c <HAL_TSC_MspInit+0x138>)
 8000d26:	0019      	movs	r1, r3
 8000d28:	0010      	movs	r0, r2
 8000d2a:	f000 f9c5 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d2e:	0021      	movs	r1, r4
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2202      	movs	r2, #2
 8000d34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2212      	movs	r2, #18
 8000d3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <HAL_TSC_MspInit+0x138>)
 8000d52:	0019      	movs	r1, r3
 8000d54:	0010      	movs	r0, r2
 8000d56:	f000 f9af 	bl	80010b8 <HAL_GPIO_Init>

  /* USER CODE END TSC_MspInit 1 */

  }

}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b00b      	add	sp, #44	@ 0x2c
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	40024000 	.word	0x40024000
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000400 	.word	0x48000400

08000d70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_PCD_MspInit+0x38>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10d      	bne.n	8000d9e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_PCD_MspInit+0x3c>)
 8000d84:	69da      	ldr	r2, [r3, #28]
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_PCD_MspInit+0x3c>)
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	0409      	lsls	r1, r1, #16
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	61da      	str	r2, [r3, #28]
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_PCD_MspInit+0x3c>)
 8000d92:	69da      	ldr	r2, [r3, #28]
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	40005c00 	.word	0x40005c00
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc4:	46c0      	nop			@ (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f87a 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df0:	f7ff fff7 	bl	8000de2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1a:	f002 f873 	bl	8002f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff f9ff 	bl	8000220 <main>

08000e22 <LoopForever>:

LoopForever:
    b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e30:	0800379c 	.word	0x0800379c
  ldr r2, =_sbss
 8000e34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e38:	2000080c 	.word	0x2000080c

08000e3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC1_COMP_IRQHandler>
	...

08000e40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <HAL_Init+0x24>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_Init+0x24>)
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f809 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e56:	f7ff fe2d 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_InitTick+0x5c>)
 8000e72:	681c      	ldr	r4, [r3, #0]
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <HAL_InitTick+0x60>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	0019      	movs	r1, r3
 8000e7a:	23fa      	movs	r3, #250	@ 0xfa
 8000e7c:	0098      	lsls	r0, r3, #2
 8000e7e:	f7ff f943 	bl	8000108 <__udivsi3>
 8000e82:	0003      	movs	r3, r0
 8000e84:	0019      	movs	r1, r3
 8000e86:	0020      	movs	r0, r4
 8000e88:	f7ff f93e 	bl	8000108 <__udivsi3>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 f905 	bl	800109e <HAL_SYSTICK_Config>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e00f      	b.n	8000ebc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d80b      	bhi.n	8000eba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 f8e2 	bl	8001074 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_InitTick+0x64>)
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b003      	add	sp, #12
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <HAL_IncTick+0x1c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	001a      	movs	r2, r3
 8000eda:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	18d2      	adds	r2, r2, r3
 8000ee0:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	46c0      	nop			@ (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000808 	.word	0x20000808

08000ef4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b02      	ldr	r3, [pc, #8]	@ (8000f04 <HAL_GetTick+0x10>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	20000808 	.word	0x20000808

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff fff0 	bl	8000ef4 <HAL_GetTick>
 8000f14:	0003      	movs	r3, r0
 8000f16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	001a      	movs	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	189b      	adds	r3, r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	f7ff ffe0 	bl	8000ef4 <HAL_GetTick>
 8000f34:	0002      	movs	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b004      	add	sp, #16
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	0002      	movs	r2, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f64:	d828      	bhi.n	8000fb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f66:	4a2f      	ldr	r2, [pc, #188]	@ (8001024 <__NVIC_SetPriority+0xd4>)
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	33c0      	adds	r3, #192	@ 0xc0
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	589b      	ldr	r3, [r3, r2]
 8000f76:	1dfa      	adds	r2, r7, #7
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	400a      	ands	r2, r1
 8000f80:	00d2      	lsls	r2, r2, #3
 8000f82:	21ff      	movs	r1, #255	@ 0xff
 8000f84:	4091      	lsls	r1, r2
 8000f86:	000a      	movs	r2, r1
 8000f88:	43d2      	mvns	r2, r2
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	22ff      	movs	r2, #255	@ 0xff
 8000f94:	401a      	ands	r2, r3
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	4003      	ands	r3, r0
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa4:	481f      	ldr	r0, [pc, #124]	@ (8001024 <__NVIC_SetPriority+0xd4>)
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	33c0      	adds	r3, #192	@ 0xc0
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fb6:	e031      	b.n	800101c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001028 <__NVIC_SetPriority+0xd8>)
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	3b08      	subs	r3, #8
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	3306      	adds	r3, #6
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	18d3      	adds	r3, r2, r3
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1dfa      	adds	r2, r7, #7
 8000fd4:	7812      	ldrb	r2, [r2, #0]
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	2203      	movs	r2, #3
 8000fda:	400a      	ands	r2, r1
 8000fdc:	00d2      	lsls	r2, r2, #3
 8000fde:	21ff      	movs	r1, #255	@ 0xff
 8000fe0:	4091      	lsls	r1, r2
 8000fe2:	000a      	movs	r2, r1
 8000fe4:	43d2      	mvns	r2, r2
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	019b      	lsls	r3, r3, #6
 8000fee:	22ff      	movs	r2, #255	@ 0xff
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	4003      	ands	r3, r0
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001000:	4809      	ldr	r0, [pc, #36]	@ (8001028 <__NVIC_SetPriority+0xd8>)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	001c      	movs	r4, r3
 8001008:	230f      	movs	r3, #15
 800100a:	4023      	ands	r3, r4
 800100c:	3b08      	subs	r3, #8
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	430a      	orrs	r2, r1
 8001012:	3306      	adds	r3, #6
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	18c3      	adds	r3, r0, r3
 8001018:	3304      	adds	r3, #4
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b003      	add	sp, #12
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	045b      	lsls	r3, r3, #17
 800103c:	429a      	cmp	r2, r3
 800103e:	d301      	bcc.n	8001044 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001040:	2301      	movs	r3, #1
 8001042:	e010      	b.n	8001066 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <SysTick_Config+0x44>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	3a01      	subs	r2, #1
 800104a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2103      	movs	r1, #3
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff ff7c 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <SysTick_Config+0x44>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <SysTick_Config+0x44>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	210f      	movs	r1, #15
 8001080:	187b      	adds	r3, r7, r1
 8001082:	1c02      	adds	r2, r0, #0
 8001084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	187b      	adds	r3, r7, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b25b      	sxtb	r3, r3
 800108e:	0011      	movs	r1, r2
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff ffbf 	bl	800102c <SysTick_Config>
 80010ae:	0003      	movs	r3, r0
}
 80010b0:	0018      	movs	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	e155      	b.n	8001374 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4091      	lsls	r1, r2
 80010d2:	000a      	movs	r2, r1
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d100      	bne.n	80010e0 <HAL_GPIO_Init+0x28>
 80010de:	e146      	b.n	800136e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2203      	movs	r2, #3
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d005      	beq.n	80010f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d130      	bne.n	800115a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112e:	2201      	movs	r2, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	2201      	movs	r2, #1
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2203      	movs	r2, #3
 8001160:	4013      	ands	r3, r2
 8001162:	2b03      	cmp	r3, #3
 8001164:	d017      	beq.n	8001196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	58d3      	ldr	r3, [r2, r3]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2207      	movs	r2, #7
 80011b4:	4013      	ands	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2107      	movs	r1, #7
 80011ce:	400b      	ands	r3, r1
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	6939      	ldr	r1, [r7, #16]
 80011e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	401a      	ands	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	23c0      	movs	r3, #192	@ 0xc0
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	4013      	ands	r3, r2
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x174>
 800122a:	e0a0      	b.n	800136e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122c:	4b57      	ldr	r3, [pc, #348]	@ (800138c <HAL_GPIO_Init+0x2d4>)
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	4b56      	ldr	r3, [pc, #344]	@ (800138c <HAL_GPIO_Init+0x2d4>)
 8001232:	2101      	movs	r1, #1
 8001234:	430a      	orrs	r2, r1
 8001236:	619a      	str	r2, [r3, #24]
 8001238:	4b54      	ldr	r3, [pc, #336]	@ (800138c <HAL_GPIO_Init+0x2d4>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	2201      	movs	r2, #1
 800123e:	4013      	ands	r3, r2
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001244:	4a52      	ldr	r2, [pc, #328]	@ (8001390 <HAL_GPIO_Init+0x2d8>)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	589b      	ldr	r3, [r3, r2]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2203      	movs	r2, #3
 8001256:	4013      	ands	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	409a      	lsls	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	2390      	movs	r3, #144	@ 0x90
 800126c:	05db      	lsls	r3, r3, #23
 800126e:	429a      	cmp	r2, r3
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x1ee>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a47      	ldr	r2, [pc, #284]	@ (8001394 <HAL_GPIO_Init+0x2dc>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x1ea>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a46      	ldr	r2, [pc, #280]	@ (8001398 <HAL_GPIO_Init+0x2e0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x1e6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a45      	ldr	r2, [pc, #276]	@ (800139c <HAL_GPIO_Init+0x2e4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x1e2>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a44      	ldr	r2, [pc, #272]	@ (80013a0 <HAL_GPIO_Init+0x2e8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x1de>
 8001292:	2304      	movs	r3, #4
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x1f0>
 8001296:	2305      	movs	r3, #5
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x1f0>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x1f0>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x1f0>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x1f0>
 80012a6:	2300      	movs	r3, #0
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	2103      	movs	r1, #3
 80012ac:	400a      	ands	r2, r1
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	@ (8001390 <HAL_GPIO_Init+0x2d8>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	2380      	movs	r3, #128	@ 0x80
 80012dc:	035b      	lsls	r3, r3, #13
 80012de:	4013      	ands	r3, r2
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ea:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	2380      	movs	r3, #128	@ 0x80
 8001306:	039b      	lsls	r3, r3, #14
 8001308:	4013      	ands	r3, r2
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001314:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	4013      	ands	r3, r2
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001344:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43da      	mvns	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	025b      	lsls	r3, r3, #9
 800135c:	4013      	ands	r3, r2
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001368:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	40da      	lsrs	r2, r3
 800137c:	1e13      	subs	r3, r2, #0
 800137e:	d000      	beq.n	8001382 <HAL_GPIO_Init+0x2ca>
 8001380:	e6a2      	b.n	80010c8 <HAL_GPIO_Init+0x10>
  } 
}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b006      	add	sp, #24
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000
 8001394:	48000400 	.word	0x48000400
 8001398:	48000800 	.word	0x48000800
 800139c:	48000c00 	.word	0x48000c00
 80013a0:	48001000 	.word	0x48001000
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	0008      	movs	r0, r1
 80013b2:	0011      	movs	r1, r2
 80013b4:	1cbb      	adds	r3, r7, #2
 80013b6:	1c02      	adds	r2, r0, #0
 80013b8:	801a      	strh	r2, [r3, #0]
 80013ba:	1c7b      	adds	r3, r7, #1
 80013bc:	1c0a      	adds	r2, r1, #0
 80013be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c0:	1c7b      	adds	r3, r7, #1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c8:	1cbb      	adds	r3, r7, #2
 80013ca:	881a      	ldrh	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d2:	1cbb      	adds	r3, r7, #2
 80013d4:	881a      	ldrh	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e08f      	b.n	8001516 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2241      	movs	r2, #65	@ 0x41
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d107      	bne.n	8001412 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	2100      	movs	r1, #0
 8001408:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0018      	movs	r0, r3
 800140e:	f7ff fb75 	bl	8000afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2241      	movs	r2, #65	@ 0x41
 8001416:	2124      	movs	r1, #36	@ 0x24
 8001418:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	438a      	bics	r2, r1
 8001428:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	493b      	ldr	r1, [pc, #236]	@ (8001520 <HAL_I2C_Init+0x13c>)
 8001434:	400a      	ands	r2, r1
 8001436:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4938      	ldr	r1, [pc, #224]	@ (8001524 <HAL_I2C_Init+0x140>)
 8001444:	400a      	ands	r2, r1
 8001446:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d108      	bne.n	8001462 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	0209      	lsls	r1, r1, #8
 800145c:	430a      	orrs	r2, r1
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	e007      	b.n	8001472 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2184      	movs	r1, #132	@ 0x84
 800146c:	0209      	lsls	r1, r1, #8
 800146e:	430a      	orrs	r2, r1
 8001470:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d109      	bne.n	800148e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2180      	movs	r1, #128	@ 0x80
 8001486:	0109      	lsls	r1, r1, #4
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	e007      	b.n	800149e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4923      	ldr	r1, [pc, #140]	@ (8001528 <HAL_I2C_Init+0x144>)
 800149a:	400a      	ands	r2, r1
 800149c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4920      	ldr	r1, [pc, #128]	@ (800152c <HAL_I2C_Init+0x148>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	491a      	ldr	r1, [pc, #104]	@ (8001524 <HAL_I2C_Init+0x140>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69d9      	ldr	r1, [r3, #28]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1a      	ldr	r2, [r3, #32]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2101      	movs	r1, #1
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2241      	movs	r2, #65	@ 0x41
 8001502:	2120      	movs	r1, #32
 8001504:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2242      	movs	r2, #66	@ 0x42
 8001510:	2100      	movs	r1, #0
 8001512:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	f0ffffff 	.word	0xf0ffffff
 8001524:	ffff7fff 	.word	0xffff7fff
 8001528:	fffff7ff 	.word	0xfffff7ff
 800152c:	02008000 	.word	0x02008000

08001530 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	000c      	movs	r4, r1
 800153a:	0010      	movs	r0, r2
 800153c:	0019      	movs	r1, r3
 800153e:	230a      	movs	r3, #10
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	1c22      	adds	r2, r4, #0
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	2308      	movs	r3, #8
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	1c02      	adds	r2, r0, #0
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	1dbb      	adds	r3, r7, #6
 8001550:	1c0a      	adds	r2, r1, #0
 8001552:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2241      	movs	r2, #65	@ 0x41
 8001558:	5c9b      	ldrb	r3, [r3, r2]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b20      	cmp	r3, #32
 800155e:	d000      	beq.n	8001562 <HAL_I2C_Mem_Write+0x32>
 8001560:	e10c      	b.n	800177c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <HAL_I2C_Mem_Write+0x42>
 8001568:	232c      	movs	r3, #44	@ 0x2c
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0ff      	b.n	800177e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2240      	movs	r2, #64	@ 0x40
 8001582:	5c9b      	ldrb	r3, [r3, r2]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_I2C_Mem_Write+0x5c>
 8001588:	2302      	movs	r3, #2
 800158a:	e0f8      	b.n	800177e <HAL_I2C_Mem_Write+0x24e>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2240      	movs	r2, #64	@ 0x40
 8001590:	2101      	movs	r1, #1
 8001592:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001594:	f7ff fcae 	bl	8000ef4 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	0219      	lsls	r1, r3, #8
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2319      	movs	r3, #25
 80015a8:	2201      	movs	r2, #1
 80015aa:	f000 f975 	bl	8001898 <I2C_WaitOnFlagUntilTimeout>
 80015ae:	1e03      	subs	r3, r0, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0e3      	b.n	800177e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2241      	movs	r2, #65	@ 0x41
 80015ba:	2121      	movs	r1, #33	@ 0x21
 80015bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2242      	movs	r2, #66	@ 0x42
 80015c2:	2140      	movs	r1, #64	@ 0x40
 80015c4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	222c      	movs	r2, #44	@ 0x2c
 80015d6:	18ba      	adds	r2, r7, r2
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015e2:	1dbb      	adds	r3, r7, #6
 80015e4:	881c      	ldrh	r4, [r3, #0]
 80015e6:	2308      	movs	r3, #8
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	881a      	ldrh	r2, [r3, #0]
 80015ec:	230a      	movs	r3, #10
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	8819      	ldrh	r1, [r3, #0]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	0023      	movs	r3, r4
 80015fe:	f000 f8c5 	bl	800178c <I2C_RequestMemoryWrite>
 8001602:	1e03      	subs	r3, r0, #0
 8001604:	d005      	beq.n	8001612 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2240      	movs	r2, #64	@ 0x40
 800160a:	2100      	movs	r1, #0
 800160c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0b5      	b.n	800177e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	2bff      	cmp	r3, #255	@ 0xff
 800161a:	d911      	bls.n	8001640 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	22ff      	movs	r2, #255	@ 0xff
 8001620:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001626:	b2da      	uxtb	r2, r3
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	045c      	lsls	r4, r3, #17
 800162c:	230a      	movs	r3, #10
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	2300      	movs	r3, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	0023      	movs	r3, r4
 800163a:	f000 fb07 	bl	8001c4c <I2C_TransferConfig>
 800163e:	e012      	b.n	8001666 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800164e:	b2da      	uxtb	r2, r3
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	049c      	lsls	r4, r3, #18
 8001654:	230a      	movs	r3, #10
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	8819      	ldrh	r1, [r3, #0]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	0023      	movs	r3, r4
 8001662:	f000 faf3 	bl	8001c4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	0018      	movs	r0, r3
 800166e:	f000 f96b 	bl	8001948 <I2C_WaitOnTXISFlagUntilTimeout>
 8001672:	1e03      	subs	r3, r0, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e081      	b.n	800177e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d03a      	beq.n	800172a <HAL_I2C_Mem_Write+0x1fa>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d136      	bne.n	800172a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	0013      	movs	r3, r2
 80016c6:	2200      	movs	r2, #0
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	f000 f8e5 	bl	8001898 <I2C_WaitOnFlagUntilTimeout>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e053      	b.n	800177e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016da:	b29b      	uxth	r3, r3
 80016dc:	2bff      	cmp	r3, #255	@ 0xff
 80016de:	d911      	bls.n	8001704 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	22ff      	movs	r2, #255	@ 0xff
 80016e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	045c      	lsls	r4, r3, #17
 80016f0:	230a      	movs	r3, #10
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	8819      	ldrh	r1, [r3, #0]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	2300      	movs	r3, #0
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	0023      	movs	r3, r4
 80016fe:	f000 faa5 	bl	8001c4c <I2C_TransferConfig>
 8001702:	e012      	b.n	800172a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001708:	b29a      	uxth	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	049c      	lsls	r4, r3, #18
 8001718:	230a      	movs	r3, #10
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	8819      	ldrh	r1, [r3, #0]
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	2300      	movs	r3, #0
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	0023      	movs	r3, r4
 8001726:	f000 fa91 	bl	8001c4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d198      	bne.n	8001666 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	0018      	movs	r0, r3
 800173c:	f000 f94a 	bl	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d001      	beq.n	8001748 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e01a      	b.n	800177e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2220      	movs	r2, #32
 800174e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	490b      	ldr	r1, [pc, #44]	@ (8001788 <HAL_I2C_Mem_Write+0x258>)
 800175c:	400a      	ands	r2, r1
 800175e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2241      	movs	r2, #65	@ 0x41
 8001764:	2120      	movs	r1, #32
 8001766:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2242      	movs	r2, #66	@ 0x42
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2240      	movs	r2, #64	@ 0x40
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e000      	b.n	800177e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800177c:	2302      	movs	r3, #2
  }
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b007      	add	sp, #28
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	fe00e800 	.word	0xfe00e800

0800178c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800178c:	b5b0      	push	{r4, r5, r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	000c      	movs	r4, r1
 8001796:	0010      	movs	r0, r2
 8001798:	0019      	movs	r1, r3
 800179a:	250a      	movs	r5, #10
 800179c:	197b      	adds	r3, r7, r5
 800179e:	1c22      	adds	r2, r4, #0
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	2308      	movs	r3, #8
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	1c02      	adds	r2, r0, #0
 80017a8:	801a      	strh	r2, [r3, #0]
 80017aa:	1dbb      	adds	r3, r7, #6
 80017ac:	1c0a      	adds	r2, r1, #0
 80017ae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017b0:	1dbb      	adds	r3, r7, #6
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	2380      	movs	r3, #128	@ 0x80
 80017b8:	045c      	lsls	r4, r3, #17
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	8819      	ldrh	r1, [r3, #0]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <I2C_RequestMemoryWrite+0xc4>)
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	0023      	movs	r3, r4
 80017c6:	f000 fa41 	bl	8001c4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017cc:	6a39      	ldr	r1, [r7, #32]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f000 f8b9 	bl	8001948 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d001      	beq.n	80017de <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e033      	b.n	8001846 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017de:	1dbb      	adds	r3, r7, #6
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017e6:	2308      	movs	r3, #8
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80017f4:	e019      	b.n	800182a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017f6:	2308      	movs	r3, #8
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b2da      	uxtb	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800180a:	6a39      	ldr	r1, [r7, #32]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f89a 	bl	8001948 <I2C_WaitOnTXISFlagUntilTimeout>
 8001814:	1e03      	subs	r3, r0, #0
 8001816:	d001      	beq.n	800181c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e014      	b.n	8001846 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800181c:	2308      	movs	r3, #8
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	0013      	movs	r3, r2
 8001834:	2200      	movs	r2, #0
 8001836:	2180      	movs	r1, #128	@ 0x80
 8001838:	f000 f82e 	bl	8001898 <I2C_WaitOnFlagUntilTimeout>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d001      	beq.n	8001844 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b004      	add	sp, #16
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	80002000 	.word	0x80002000

08001854 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2202      	movs	r2, #2
 8001864:	4013      	ands	r3, r2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d103      	bne.n	8001872 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2201      	movs	r2, #1
 800187a:	4013      	ands	r3, r2
 800187c:	2b01      	cmp	r3, #1
 800187e:	d007      	beq.n	8001890 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699a      	ldr	r2, [r3, #24]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2101      	movs	r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	619a      	str	r2, [r3, #24]
  }
}
 8001890:	46c0      	nop			@ (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b002      	add	sp, #8
 8001896:	bd80      	pop	{r7, pc}

08001898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018a8:	e03a      	b.n	8001920 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 f8d3 	bl	8001a5c <I2C_IsErrorOccurred>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e040      	b.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	d02d      	beq.n	8001920 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018c4:	f7ff fb16 	bl	8000ef4 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d302      	bcc.n	80018da <I2C_WaitOnFlagUntilTimeout+0x42>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d122      	bne.n	8001920 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	4013      	ands	r3, r2
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	425a      	negs	r2, r3
 80018ea:	4153      	adcs	r3, r2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	001a      	movs	r2, r3
 80018f0:	1dfb      	adds	r3, r7, #7
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d113      	bne.n	8001920 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fc:	2220      	movs	r2, #32
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2241      	movs	r2, #65	@ 0x41
 8001908:	2120      	movs	r1, #32
 800190a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2242      	movs	r2, #66	@ 0x42
 8001910:	2100      	movs	r1, #0
 8001912:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2240      	movs	r2, #64	@ 0x40
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e00f      	b.n	8001940 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4013      	ands	r3, r2
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	425a      	negs	r2, r3
 8001930:	4153      	adcs	r3, r2
 8001932:	b2db      	uxtb	r3, r3
 8001934:	001a      	movs	r2, r3
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d0b5      	beq.n	80018aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}

08001948 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001954:	e032      	b.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	0018      	movs	r0, r3
 800195e:	f000 f87d 	bl	8001a5c <I2C_IsErrorOccurred>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d001      	beq.n	800196a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e030      	b.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3301      	adds	r3, #1
 800196e:	d025      	beq.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001970:	f7ff fac0 	bl	8000ef4 <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	429a      	cmp	r2, r3
 800197e:	d302      	bcc.n	8001986 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11a      	bne.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	2b02      	cmp	r3, #2
 8001992:	d013      	beq.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001998:	2220      	movs	r2, #32
 800199a:	431a      	orrs	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2241      	movs	r2, #65	@ 0x41
 80019a4:	2120      	movs	r1, #32
 80019a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2242      	movs	r2, #66	@ 0x42
 80019ac:	2100      	movs	r1, #0
 80019ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2240      	movs	r2, #64	@ 0x40
 80019b4:	2100      	movs	r1, #0
 80019b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e007      	b.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d1c5      	bne.n	8001956 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	0018      	movs	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	b004      	add	sp, #16
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e0:	e02f      	b.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 f837 	bl	8001a5c <I2C_IsErrorOccurred>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e02d      	b.n	8001a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f6:	f7ff fa7d 	bl	8000ef4 <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d302      	bcc.n	8001a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11a      	bne.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2220      	movs	r2, #32
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d013      	beq.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	2220      	movs	r2, #32
 8001a20:	431a      	orrs	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2241      	movs	r2, #65	@ 0x41
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2242      	movs	r2, #66	@ 0x42
 8001a32:	2100      	movs	r1, #0
 8001a34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2240      	movs	r2, #64	@ 0x40
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e007      	b.n	8001a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d1c8      	bne.n	80019e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b004      	add	sp, #16
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2327      	movs	r3, #39	@ 0x27
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2210      	movs	r2, #16
 8001a84:	4013      	ands	r3, r2
 8001a86:	d100      	bne.n	8001a8a <I2C_IsErrorOccurred+0x2e>
 8001a88:	e079      	b.n	8001b7e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2210      	movs	r2, #16
 8001a90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a92:	e057      	b.n	8001b44 <I2C_IsErrorOccurred+0xe8>
 8001a94:	2227      	movs	r2, #39	@ 0x27
 8001a96:	18bb      	adds	r3, r7, r2
 8001a98:	18ba      	adds	r2, r7, r2
 8001a9a:	7812      	ldrb	r2, [r2, #0]
 8001a9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	d04f      	beq.n	8001b44 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aa4:	f7ff fa26 	bl	8000ef4 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d302      	bcc.n	8001aba <I2C_IsErrorOccurred+0x5e>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d144      	bne.n	8001b44 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	2380      	movs	r3, #128	@ 0x80
 8001ac2:	01db      	lsls	r3, r3, #7
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ac8:	2013      	movs	r0, #19
 8001aca:	183b      	adds	r3, r7, r0
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	2142      	movs	r1, #66	@ 0x42
 8001ad0:	5c52      	ldrb	r2, [r2, r1]
 8001ad2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	401a      	ands	r2, r3
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d126      	bne.n	8001b36 <I2C_IsErrorOccurred+0xda>
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	01db      	lsls	r3, r3, #7
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d021      	beq.n	8001b36 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001af2:	183b      	adds	r3, r7, r0
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	d01d      	beq.n	8001b36 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	01c9      	lsls	r1, r1, #7
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b0c:	f7ff f9f2 	bl	8000ef4 <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b14:	e00f      	b.n	8001b36 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b16:	f7ff f9ed 	bl	8000ef4 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b19      	cmp	r3, #25
 8001b22:	d908      	bls.n	8001b36 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	2220      	movs	r2, #32
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b2c:	2327      	movs	r3, #39	@ 0x27
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]

              break;
 8001b34:	e006      	b.n	8001b44 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d1e8      	bne.n	8001b16 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d004      	beq.n	8001b5c <I2C_IsErrorOccurred+0x100>
 8001b52:	2327      	movs	r3, #39	@ 0x27
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d09b      	beq.n	8001a94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b5c:	2327      	movs	r3, #39	@ 0x27
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d103      	bne.n	8001b6e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	2204      	movs	r2, #4
 8001b72:	4313      	orrs	r3, r2
 8001b74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b76:	2327      	movs	r3, #39	@ 0x27
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d00c      	beq.n	8001baa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	2201      	movs	r2, #1
 8001b94:	4313      	orrs	r3, r2
 8001b96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2280      	movs	r2, #128	@ 0x80
 8001b9e:	0052      	lsls	r2, r2, #1
 8001ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ba2:	2327      	movs	r3, #39	@ 0x27
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	2380      	movs	r3, #128	@ 0x80
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d00c      	beq.n	8001bce <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2280      	movs	r2, #128	@ 0x80
 8001bc2:	00d2      	lsls	r2, r2, #3
 8001bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bc6:	2327      	movs	r3, #39	@ 0x27
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d00c      	beq.n	8001bf2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bea:	2327      	movs	r3, #39	@ 0x27
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001bf2:	2327      	movs	r3, #39	@ 0x27
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01d      	beq.n	8001c38 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff fe28 	bl	8001854 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	490e      	ldr	r1, [pc, #56]	@ (8001c48 <I2C_IsErrorOccurred+0x1ec>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2241      	movs	r2, #65	@ 0x41
 8001c24:	2120      	movs	r1, #32
 8001c26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2242      	movs	r2, #66	@ 0x42
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2240      	movs	r2, #64	@ 0x40
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001c38:	2327      	movs	r3, #39	@ 0x27
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b00a      	add	sp, #40	@ 0x28
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	fe00e800 	.word	0xfe00e800

08001c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	0008      	movs	r0, r1
 8001c56:	0011      	movs	r1, r2
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	240a      	movs	r4, #10
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	1c02      	adds	r2, r0, #0
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	2009      	movs	r0, #9
 8001c64:	183b      	adds	r3, r7, r0
 8001c66:	1c0a      	adds	r2, r1, #0
 8001c68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	059b      	lsls	r3, r3, #22
 8001c70:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c72:	183b      	adds	r3, r7, r0
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	0419      	lsls	r1, r3, #16
 8001c78:	23ff      	movs	r3, #255	@ 0xff
 8001c7a:	041b      	lsls	r3, r3, #16
 8001c7c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c7e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	4313      	orrs	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c96:	0d51      	lsrs	r1, r2, #21
 8001c98:	2280      	movs	r2, #128	@ 0x80
 8001c9a:	00d2      	lsls	r2, r2, #3
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <I2C_TransferConfig+0x70>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	43d2      	mvns	r2, r2
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b007      	add	sp, #28
 8001cb8:	bd90      	pop	{r4, r7, pc}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	03ff63ff 	.word	0x03ff63ff

08001cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2241      	movs	r2, #65	@ 0x41
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b20      	cmp	r3, #32
 8001cd4:	d138      	bne.n	8001d48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2240      	movs	r2, #64	@ 0x40
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e032      	b.n	8001d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2240      	movs	r2, #64	@ 0x40
 8001ce8:	2101      	movs	r1, #1
 8001cea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2241      	movs	r2, #65	@ 0x41
 8001cf0:	2124      	movs	r1, #36	@ 0x24
 8001cf2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4911      	ldr	r1, [pc, #68]	@ (8001d54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2241      	movs	r2, #65	@ 0x41
 8001d38:	2120      	movs	r1, #32
 8001d3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	@ 0x40
 8001d40:	2100      	movs	r1, #0
 8001d42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e000      	b.n	8001d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d48:	2302      	movs	r3, #2
  }
}
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b002      	add	sp, #8
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	ffffefff 	.word	0xffffefff

08001d58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2241      	movs	r2, #65	@ 0x41
 8001d66:	5c9b      	ldrb	r3, [r3, r2]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d139      	bne.n	8001de2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2240      	movs	r2, #64	@ 0x40
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e033      	b.n	8001de4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	2101      	movs	r1, #1
 8001d82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2241      	movs	r2, #65	@ 0x41
 8001d88:	2124      	movs	r1, #36	@ 0x24
 8001d8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2101      	movs	r1, #1
 8001d98:	438a      	bics	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2241      	movs	r2, #65	@ 0x41
 8001dd2:	2120      	movs	r1, #32
 8001dd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2240      	movs	r2, #64	@ 0x40
 8001dda:	2100      	movs	r1, #0
 8001ddc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
  }
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b004      	add	sp, #16
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	fffff0ff 	.word	0xfffff0ff

08001df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0e4      	b.n	8001fcc <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a73      	ldr	r2, [pc, #460]	@ (8001fd4 <HAL_PCD_Init+0x1e4>)
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d108      	bne.n	8001e20 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	23a4      	movs	r3, #164	@ 0xa4
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	2100      	movs	r1, #0
 8001e16:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f7fe ffa8 	bl	8000d70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a6c      	ldr	r2, [pc, #432]	@ (8001fd4 <HAL_PCD_Init+0x1e4>)
 8001e24:	2103      	movs	r1, #3
 8001e26:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f001 f82b 	bl	8002e88 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e32:	230f      	movs	r3, #15
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e047      	b.n	8001ecc <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e3c:	200f      	movs	r0, #15
 8001e3e:	183b      	adds	r3, r7, r0
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	0013      	movs	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	18cb      	adds	r3, r1, r3
 8001e4e:	3311      	adds	r3, #17
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	189b      	adds	r3, r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	18cb      	adds	r3, r1, r3
 8001e64:	3310      	adds	r3, #16
 8001e66:	183a      	adds	r2, r7, r0
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e6c:	183b      	adds	r3, r7, r0
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	0013      	movs	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	189b      	adds	r3, r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	18cb      	adds	r3, r1, r3
 8001e7c:	3313      	adds	r3, #19
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e82:	183b      	adds	r3, r7, r0
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	0013      	movs	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	189b      	adds	r3, r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	18cb      	adds	r3, r1, r3
 8001e92:	3320      	adds	r3, #32
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e98:	183b      	adds	r3, r7, r0
 8001e9a:	781a      	ldrb	r2, [r3, #0]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	189b      	adds	r3, r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	18cb      	adds	r3, r1, r3
 8001ea8:	3324      	adds	r3, #36	@ 0x24
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eae:	183b      	adds	r3, r7, r0
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	0013      	movs	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	189b      	adds	r3, r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec2:	183b      	adds	r3, r7, r0
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	183b      	adds	r3, r7, r0
 8001ec8:	3201      	adds	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	791b      	ldrb	r3, [r3, #4]
 8001ed0:	210f      	movs	r1, #15
 8001ed2:	187a      	adds	r2, r7, r1
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3b0      	bcc.n	8001e3c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e056      	b.n	8001f90 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ee2:	240f      	movs	r4, #15
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	2352      	movs	r3, #82	@ 0x52
 8001eec:	33ff      	adds	r3, #255	@ 0xff
 8001eee:	0019      	movs	r1, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	189b      	adds	r3, r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	18c3      	adds	r3, r0, r3
 8001efa:	185b      	adds	r3, r3, r1
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f00:	193b      	adds	r3, r7, r4
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	23a8      	movs	r3, #168	@ 0xa8
 8001f08:	0059      	lsls	r1, r3, #1
 8001f0a:	0013      	movs	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	18c3      	adds	r3, r0, r3
 8001f14:	185b      	adds	r3, r3, r1
 8001f16:	193a      	adds	r2, r7, r4
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1c:	193b      	adds	r3, r7, r4
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	2354      	movs	r3, #84	@ 0x54
 8001f24:	33ff      	adds	r3, #255	@ 0xff
 8001f26:	0019      	movs	r1, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	189b      	adds	r3, r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	18c3      	adds	r3, r0, r3
 8001f32:	185b      	adds	r3, r3, r1
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	23b0      	movs	r3, #176	@ 0xb0
 8001f40:	0059      	lsls	r1, r3, #1
 8001f42:	0013      	movs	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	189b      	adds	r3, r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	18c3      	adds	r3, r0, r3
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	23b2      	movs	r3, #178	@ 0xb2
 8001f5a:	0059      	lsls	r1, r3, #1
 8001f5c:	0013      	movs	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	189b      	adds	r3, r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	18c3      	adds	r3, r0, r3
 8001f66:	185b      	adds	r3, r3, r1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f6c:	193b      	adds	r3, r7, r4
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	23b4      	movs	r3, #180	@ 0xb4
 8001f74:	0059      	lsls	r1, r3, #1
 8001f76:	0013      	movs	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	189b      	adds	r3, r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	18c3      	adds	r3, r0, r3
 8001f80:	185b      	adds	r3, r3, r1
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	3201      	adds	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	220f      	movs	r2, #15
 8001f96:	18ba      	adds	r2, r7, r2
 8001f98:	7812      	ldrb	r2, [r2, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3a1      	bcc.n	8001ee2 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6859      	ldr	r1, [r3, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	f000 ff88 	bl	8002ebc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_PCD_Init+0x1e4>)
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7a9b      	ldrb	r3, [r3, #10]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d103      	bne.n	8001fca <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f000 f807 	bl	8001fd8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b005      	add	sp, #20
 8001fd2:	bd90      	pop	{r4, r7, pc}
 8001fd4:	00000291 	.word	0x00000291

08001fd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	23b4      	movs	r3, #180	@ 0xb4
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	2101      	movs	r1, #1
 8001fee:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	23b2      	movs	r3, #178	@ 0xb2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2254      	movs	r2, #84	@ 0x54
 8001ffe:	5a9b      	ldrh	r3, [r3, r2]
 8002000:	b29b      	uxth	r3, r3
 8002002:	2201      	movs	r2, #1
 8002004:	4313      	orrs	r3, r2
 8002006:	b299      	uxth	r1, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2254      	movs	r2, #84	@ 0x54
 800200c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2254      	movs	r2, #84	@ 0x54
 8002012:	5a9b      	ldrh	r3, [r3, r2]
 8002014:	b29b      	uxth	r3, r3
 8002016:	2202      	movs	r2, #2
 8002018:	4313      	orrs	r3, r2
 800201a:	b299      	uxth	r1, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2254      	movs	r2, #84	@ 0x54
 8002020:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b004      	add	sp, #16
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	f000 fb76 	bl	800272c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	4013      	ands	r3, r2
 8002048:	d100      	bne.n	800204c <HAL_RCC_OscConfig+0x20>
 800204a:	e08e      	b.n	800216a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800204c:	4bc5      	ldr	r3, [pc, #788]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	220c      	movs	r2, #12
 8002052:	4013      	ands	r3, r2
 8002054:	2b04      	cmp	r3, #4
 8002056:	d00e      	beq.n	8002076 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002058:	4bc2      	ldr	r3, [pc, #776]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	220c      	movs	r2, #12
 800205e:	4013      	ands	r3, r2
 8002060:	2b08      	cmp	r3, #8
 8002062:	d117      	bne.n	8002094 <HAL_RCC_OscConfig+0x68>
 8002064:	4bbf      	ldr	r3, [pc, #764]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	23c0      	movs	r3, #192	@ 0xc0
 800206a:	025b      	lsls	r3, r3, #9
 800206c:	401a      	ands	r2, r3
 800206e:	2380      	movs	r3, #128	@ 0x80
 8002070:	025b      	lsls	r3, r3, #9
 8002072:	429a      	cmp	r2, r3
 8002074:	d10e      	bne.n	8002094 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	4bbb      	ldr	r3, [pc, #748]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	029b      	lsls	r3, r3, #10
 800207e:	4013      	ands	r3, r2
 8002080:	d100      	bne.n	8002084 <HAL_RCC_OscConfig+0x58>
 8002082:	e071      	b.n	8002168 <HAL_RCC_OscConfig+0x13c>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d000      	beq.n	800208e <HAL_RCC_OscConfig+0x62>
 800208c:	e06c      	b.n	8002168 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f000 fb4c 	bl	800272c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <HAL_RCC_OscConfig+0x80>
 800209c:	4bb1      	ldr	r3, [pc, #708]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4bb0      	ldr	r3, [pc, #704]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	0249      	lsls	r1, r1, #9
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e02f      	b.n	800210c <HAL_RCC_OscConfig+0xe0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0xa2>
 80020b4:	4bab      	ldr	r3, [pc, #684]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4baa      	ldr	r3, [pc, #680]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020ba:	49ab      	ldr	r1, [pc, #684]	@ (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020bc:	400a      	ands	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	4ba8      	ldr	r3, [pc, #672]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4ba7      	ldr	r3, [pc, #668]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020c6:	49a9      	ldr	r1, [pc, #676]	@ (800236c <HAL_RCC_OscConfig+0x340>)
 80020c8:	400a      	ands	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e01e      	b.n	800210c <HAL_RCC_OscConfig+0xe0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d10e      	bne.n	80020f4 <HAL_RCC_OscConfig+0xc8>
 80020d6:	4ba3      	ldr	r3, [pc, #652]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4ba2      	ldr	r3, [pc, #648]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	02c9      	lsls	r1, r1, #11
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	4b9f      	ldr	r3, [pc, #636]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b9e      	ldr	r3, [pc, #632]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020ea:	2180      	movs	r1, #128	@ 0x80
 80020ec:	0249      	lsls	r1, r1, #9
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0xe0>
 80020f4:	4b9b      	ldr	r3, [pc, #620]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80020fa:	499b      	ldr	r1, [pc, #620]	@ (8002368 <HAL_RCC_OscConfig+0x33c>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4b98      	ldr	r3, [pc, #608]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b97      	ldr	r3, [pc, #604]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002106:	4999      	ldr	r1, [pc, #612]	@ (800236c <HAL_RCC_OscConfig+0x340>)
 8002108:	400a      	ands	r2, r1
 800210a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d014      	beq.n	800213e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe feee 	bl	8000ef4 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211e:	f7fe fee9 	bl	8000ef4 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	@ 0x64
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e2fd      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002130:	4b8c      	ldr	r3, [pc, #560]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	029b      	lsls	r3, r3, #10
 8002138:	4013      	ands	r3, r2
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0xf2>
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe fed9 	bl	8000ef4 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002148:	f7fe fed4 	bl	8000ef4 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	@ 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e2e8      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	4b82      	ldr	r3, [pc, #520]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	029b      	lsls	r3, r3, #10
 8002162:	4013      	ands	r3, r2
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x11c>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d100      	bne.n	8002176 <HAL_RCC_OscConfig+0x14a>
 8002174:	e06c      	b.n	8002250 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002176:	4b7b      	ldr	r3, [pc, #492]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	220c      	movs	r2, #12
 800217c:	4013      	ands	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002180:	4b78      	ldr	r3, [pc, #480]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	220c      	movs	r2, #12
 8002186:	4013      	ands	r3, r2
 8002188:	2b08      	cmp	r3, #8
 800218a:	d11f      	bne.n	80021cc <HAL_RCC_OscConfig+0x1a0>
 800218c:	4b75      	ldr	r3, [pc, #468]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	23c0      	movs	r3, #192	@ 0xc0
 8002192:	025b      	lsls	r3, r3, #9
 8002194:	401a      	ands	r2, r3
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	429a      	cmp	r2, r3
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b71      	ldr	r3, [pc, #452]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_OscConfig+0x188>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e2bb      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	22f8      	movs	r2, #248	@ 0xf8
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00da      	lsls	r2, r3, #3
 80021c4:	4b67      	ldr	r3, [pc, #412]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e041      	b.n	8002250 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d024      	beq.n	800221e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b63      	ldr	r3, [pc, #396]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b62      	ldr	r3, [pc, #392]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80021da:	2101      	movs	r1, #1
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe88 	bl	8000ef4 <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ea:	f7fe fe83 	bl	8000ef4 <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e297      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	4b59      	ldr	r3, [pc, #356]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2202      	movs	r2, #2
 8002202:	4013      	ands	r3, r2
 8002204:	d0f1      	beq.n	80021ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002206:	4b57      	ldr	r3, [pc, #348]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	22f8      	movs	r2, #248	@ 0xf8
 800220c:	4393      	bics	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	00da      	lsls	r2, r3, #3
 8002216:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e018      	b.n	8002250 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221e:	4b51      	ldr	r3, [pc, #324]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b50      	ldr	r3, [pc, #320]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002224:	2101      	movs	r1, #1
 8002226:	438a      	bics	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fe63 	bl	8000ef4 <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002234:	f7fe fe5e 	bl	8000ef4 <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e272      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	4b47      	ldr	r3, [pc, #284]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d1f1      	bne.n	8002234 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2208      	movs	r2, #8
 8002256:	4013      	ands	r3, r2
 8002258:	d036      	beq.n	80022c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d019      	beq.n	8002296 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b40      	ldr	r3, [pc, #256]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002264:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002266:	4b3f      	ldr	r3, [pc, #252]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002268:	2101      	movs	r1, #1
 800226a:	430a      	orrs	r2, r1
 800226c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe fe41 	bl	8000ef4 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7fe fe3c 	bl	8000ef4 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e250      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	2202      	movs	r2, #2
 8002290:	4013      	ands	r3, r2
 8002292:	d0f1      	beq.n	8002278 <HAL_RCC_OscConfig+0x24c>
 8002294:	e018      	b.n	80022c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002296:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229a:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 800229c:	2101      	movs	r1, #1
 800229e:	438a      	bics	r2, r1
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7fe fe27 	bl	8000ef4 <HAL_GetTick>
 80022a6:	0003      	movs	r3, r0
 80022a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fe22 	bl	8000ef4 <HAL_GetTick>
 80022b0:	0002      	movs	r2, r0
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e236      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022be:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	d1f1      	bne.n	80022ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2204      	movs	r2, #4
 80022ce:	4013      	ands	r3, r2
 80022d0:	d100      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2a8>
 80022d2:	e0b5      	b.n	8002440 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d4:	201f      	movs	r0, #31
 80022d6:	183b      	adds	r3, r7, r0
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022dc:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	055b      	lsls	r3, r3, #21
 80022e4:	4013      	ands	r3, r2
 80022e6:	d110      	bne.n	800230a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80022ee:	2180      	movs	r1, #128	@ 0x80
 80022f0:	0549      	lsls	r1, r1, #21
 80022f2:	430a      	orrs	r2, r1
 80022f4:	61da      	str	r2, [r3, #28]
 80022f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	055b      	lsls	r3, r3, #21
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002304:	183b      	adds	r3, r7, r0
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_RCC_OscConfig+0x344>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4013      	ands	r3, r2
 8002314:	d11a      	bne.n	800234c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002316:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <HAL_RCC_OscConfig+0x344>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <HAL_RCC_OscConfig+0x344>)
 800231c:	2180      	movs	r1, #128	@ 0x80
 800231e:	0049      	lsls	r1, r1, #1
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002324:	f7fe fde6 	bl	8000ef4 <HAL_GetTick>
 8002328:	0003      	movs	r3, r0
 800232a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7fe fde1 	bl	8000ef4 <HAL_GetTick>
 8002332:	0002      	movs	r2, r0
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	@ 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1f5      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_OscConfig+0x344>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10f      	bne.n	8002374 <HAL_RCC_OscConfig+0x348>
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	4b02      	ldr	r3, [pc, #8]	@ (8002364 <HAL_RCC_OscConfig+0x338>)
 800235a:	2101      	movs	r1, #1
 800235c:	430a      	orrs	r2, r1
 800235e:	621a      	str	r2, [r3, #32]
 8002360:	e036      	b.n	80023d0 <HAL_RCC_OscConfig+0x3a4>
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	40021000 	.word	0x40021000
 8002368:	fffeffff 	.word	0xfffeffff
 800236c:	fffbffff 	.word	0xfffbffff
 8002370:	40007000 	.word	0x40007000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x36a>
 800237c:	4bca      	ldr	r3, [pc, #808]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	4bc9      	ldr	r3, [pc, #804]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002382:	2101      	movs	r1, #1
 8002384:	438a      	bics	r2, r1
 8002386:	621a      	str	r2, [r3, #32]
 8002388:	4bc7      	ldr	r3, [pc, #796]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	4bc6      	ldr	r3, [pc, #792]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800238e:	2104      	movs	r1, #4
 8002390:	438a      	bics	r2, r1
 8002392:	621a      	str	r2, [r3, #32]
 8002394:	e01c      	b.n	80023d0 <HAL_RCC_OscConfig+0x3a4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x38c>
 800239e:	4bc2      	ldr	r3, [pc, #776]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023a0:	6a1a      	ldr	r2, [r3, #32]
 80023a2:	4bc1      	ldr	r3, [pc, #772]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023a4:	2104      	movs	r1, #4
 80023a6:	430a      	orrs	r2, r1
 80023a8:	621a      	str	r2, [r3, #32]
 80023aa:	4bbf      	ldr	r3, [pc, #764]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	4bbe      	ldr	r3, [pc, #760]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	430a      	orrs	r2, r1
 80023b4:	621a      	str	r2, [r3, #32]
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x3a4>
 80023b8:	4bbb      	ldr	r3, [pc, #748]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	4bba      	ldr	r3, [pc, #744]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023be:	2101      	movs	r1, #1
 80023c0:	438a      	bics	r2, r1
 80023c2:	621a      	str	r2, [r3, #32]
 80023c4:	4bb8      	ldr	r3, [pc, #736]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	4bb7      	ldr	r3, [pc, #732]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023ca:	2104      	movs	r1, #4
 80023cc:	438a      	bics	r2, r1
 80023ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d014      	beq.n	8002402 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7fe fd8c 	bl	8000ef4 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	e009      	b.n	80023f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7fe fd87 	bl	8000ef4 <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	4aaf      	ldr	r2, [pc, #700]	@ (80026ac <HAL_RCC_OscConfig+0x680>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e19a      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	4bac      	ldr	r3, [pc, #688]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x3b6>
 8002400:	e013      	b.n	800242a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe fd77 	bl	8000ef4 <HAL_GetTick>
 8002406:	0003      	movs	r3, r0
 8002408:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240a:	e009      	b.n	8002420 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe fd72 	bl	8000ef4 <HAL_GetTick>
 8002410:	0002      	movs	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	4aa5      	ldr	r2, [pc, #660]	@ (80026ac <HAL_RCC_OscConfig+0x680>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e185      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	4ba1      	ldr	r3, [pc, #644]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800242a:	231f      	movs	r3, #31
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002434:	4b9c      	ldr	r3, [pc, #624]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	4b9b      	ldr	r3, [pc, #620]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800243a:	499d      	ldr	r1, [pc, #628]	@ (80026b0 <HAL_RCC_OscConfig+0x684>)
 800243c:	400a      	ands	r2, r1
 800243e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2210      	movs	r2, #16
 8002446:	4013      	ands	r3, r2
 8002448:	d063      	beq.n	8002512 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d12a      	bne.n	80024a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002452:	4b95      	ldr	r3, [pc, #596]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002456:	4b94      	ldr	r3, [pc, #592]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002458:	2104      	movs	r1, #4
 800245a:	430a      	orrs	r2, r1
 800245c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800245e:	4b92      	ldr	r3, [pc, #584]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002462:	4b91      	ldr	r3, [pc, #580]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7fe fd43 	bl	8000ef4 <HAL_GetTick>
 800246e:	0003      	movs	r3, r0
 8002470:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002474:	f7fe fd3e 	bl	8000ef4 <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e152      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002486:	4b88      	ldr	r3, [pc, #544]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800248a:	2202      	movs	r2, #2
 800248c:	4013      	ands	r3, r2
 800248e:	d0f1      	beq.n	8002474 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002490:	4b85      	ldr	r3, [pc, #532]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002494:	22f8      	movs	r2, #248	@ 0xf8
 8002496:	4393      	bics	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	00da      	lsls	r2, r3, #3
 80024a0:	4b81      	ldr	r3, [pc, #516]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024a6:	e034      	b.n	8002512 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	3305      	adds	r3, #5
 80024ae:	d111      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024b0:	4b7d      	ldr	r3, [pc, #500]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024b4:	4b7c      	ldr	r3, [pc, #496]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024b6:	2104      	movs	r1, #4
 80024b8:	438a      	bics	r2, r1
 80024ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024bc:	4b7a      	ldr	r3, [pc, #488]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c0:	22f8      	movs	r2, #248	@ 0xf8
 80024c2:	4393      	bics	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	00da      	lsls	r2, r3, #3
 80024cc:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80024d2:	e01e      	b.n	8002512 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024d4:	4b74      	ldr	r3, [pc, #464]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024d8:	4b73      	ldr	r3, [pc, #460]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024da:	2104      	movs	r1, #4
 80024dc:	430a      	orrs	r2, r1
 80024de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024e0:	4b71      	ldr	r3, [pc, #452]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024e4:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80024e6:	2101      	movs	r1, #1
 80024e8:	438a      	bics	r2, r1
 80024ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ec:	f7fe fd02 	bl	8000ef4 <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024f6:	f7fe fcfd 	bl	8000ef4 <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e111      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002508:	4b67      	ldr	r3, [pc, #412]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800250a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250c:	2202      	movs	r2, #2
 800250e:	4013      	ands	r3, r2
 8002510:	d1f1      	bne.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2220      	movs	r2, #32
 8002518:	4013      	ands	r3, r2
 800251a:	d05c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800251c:	4b62      	ldr	r3, [pc, #392]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	220c      	movs	r2, #12
 8002522:	4013      	ands	r3, r2
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d00e      	beq.n	8002546 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002528:	4b5f      	ldr	r3, [pc, #380]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	220c      	movs	r2, #12
 800252e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002530:	2b08      	cmp	r3, #8
 8002532:	d114      	bne.n	800255e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002534:	4b5c      	ldr	r3, [pc, #368]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	23c0      	movs	r3, #192	@ 0xc0
 800253a:	025b      	lsls	r3, r3, #9
 800253c:	401a      	ands	r2, r3
 800253e:	23c0      	movs	r3, #192	@ 0xc0
 8002540:	025b      	lsls	r3, r3, #9
 8002542:	429a      	cmp	r2, r3
 8002544:	d10b      	bne.n	800255e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002546:	4b58      	ldr	r3, [pc, #352]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	029b      	lsls	r3, r3, #10
 800254e:	4013      	ands	r3, r2
 8002550:	d040      	beq.n	80025d4 <HAL_RCC_OscConfig+0x5a8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d03c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0e6      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01b      	beq.n	800259e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002566:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800256a:	4b4f      	ldr	r3, [pc, #316]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800256c:	2180      	movs	r1, #128	@ 0x80
 800256e:	0249      	lsls	r1, r1, #9
 8002570:	430a      	orrs	r2, r1
 8002572:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fcbe 	bl	8000ef4 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800257e:	f7fe fcb9 	bl	8000ef4 <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0cd      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002590:	4b45      	ldr	r3, [pc, #276]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002594:	2380      	movs	r3, #128	@ 0x80
 8002596:	029b      	lsls	r3, r3, #10
 8002598:	4013      	ands	r3, r2
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x552>
 800259c:	e01b      	b.n	80025d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800259e:	4b42      	ldr	r3, [pc, #264]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80025a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	4943      	ldr	r1, [pc, #268]	@ (80026b4 <HAL_RCC_OscConfig+0x688>)
 80025a6:	400a      	ands	r2, r1
 80025a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7fe fca3 	bl	8000ef4 <HAL_GetTick>
 80025ae:	0003      	movs	r3, r0
 80025b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025b4:	f7fe fc9e 	bl	8000ef4 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0b2      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80025c6:	4b38      	ldr	r3, [pc, #224]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80025c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ca:	2380      	movs	r3, #128	@ 0x80
 80025cc:	029b      	lsls	r3, r3, #10
 80025ce:	4013      	ands	r3, r2
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x588>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80025d4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d100      	bne.n	80025e0 <HAL_RCC_OscConfig+0x5b4>
 80025de:	e0a4      	b.n	800272a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	220c      	movs	r2, #12
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d100      	bne.n	80025ee <HAL_RCC_OscConfig+0x5c2>
 80025ec:	e078      	b.n	80026e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d14c      	bne.n	8002690 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b2c      	ldr	r3, [pc, #176]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 80025fc:	492e      	ldr	r1, [pc, #184]	@ (80026b8 <HAL_RCC_OscConfig+0x68c>)
 80025fe:	400a      	ands	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fc77 	bl	8000ef4 <HAL_GetTick>
 8002606:	0003      	movs	r3, r0
 8002608:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe fc72 	bl	8000ef4 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e086      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	049b      	lsls	r3, r3, #18
 8002626:	4013      	ands	r3, r2
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262a:	4b1f      	ldr	r3, [pc, #124]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	220f      	movs	r2, #15
 8002630:	4393      	bics	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002638:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800263a:	430a      	orrs	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800263e:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4a1e      	ldr	r2, [pc, #120]	@ (80026bc <HAL_RCC_OscConfig+0x690>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	431a      	orrs	r2, r3
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002654:	430a      	orrs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002658:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 800265e:	2180      	movs	r1, #128	@ 0x80
 8002660:	0449      	lsls	r1, r1, #17
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe fc45 	bl	8000ef4 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fc40 	bl	8000ef4 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e054      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002682:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	049b      	lsls	r3, r3, #18
 800268a:	4013      	ands	r3, r2
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x644>
 800268e:	e04c      	b.n	800272a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <HAL_RCC_OscConfig+0x67c>)
 8002696:	4908      	ldr	r1, [pc, #32]	@ (80026b8 <HAL_RCC_OscConfig+0x68c>)
 8002698:	400a      	ands	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fc2a 	bl	8000ef4 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a4:	e015      	b.n	80026d2 <HAL_RCC_OscConfig+0x6a6>
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	40021000 	.word	0x40021000
 80026ac:	00001388 	.word	0x00001388
 80026b0:	efffffff 	.word	0xefffffff
 80026b4:	fffeffff 	.word	0xfffeffff
 80026b8:	feffffff 	.word	0xfeffffff
 80026bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe fc18 	bl	8000ef4 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e02c      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d2:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_RCC_OscConfig+0x708>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	049b      	lsls	r3, r3, #18
 80026da:	4013      	ands	r3, r2
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x694>
 80026de:	e024      	b.n	800272a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e01f      	b.n	800272c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026ec:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_RCC_OscConfig+0x708>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <HAL_RCC_OscConfig+0x708>)
 80026f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	23c0      	movs	r3, #192	@ 0xc0
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	401a      	ands	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	429a      	cmp	r2, r3
 8002706:	d10e      	bne.n	8002726 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	220f      	movs	r2, #15
 800270c:	401a      	ands	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d107      	bne.n	8002726 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	23f0      	movs	r3, #240	@ 0xf0
 800271a:	039b      	lsls	r3, r3, #14
 800271c:	401a      	ands	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b008      	add	sp, #32
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0bf      	b.n	80028cc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_RCC_ClockConfig+0x19c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d911      	bls.n	800277e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b5e      	ldr	r3, [pc, #376]	@ (80028d4 <HAL_RCC_ClockConfig+0x19c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	4393      	bics	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	4b5b      	ldr	r3, [pc, #364]	@ (80028d4 <HAL_RCC_ClockConfig+0x19c>)
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276c:	4b59      	ldr	r3, [pc, #356]	@ (80028d4 <HAL_RCC_ClockConfig+0x19c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	4013      	ands	r3, r2
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0a6      	b.n	80028cc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2202      	movs	r2, #2
 8002784:	4013      	ands	r3, r2
 8002786:	d015      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2204      	movs	r2, #4
 800278e:	4013      	ands	r3, r2
 8002790:	d006      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002792:	4b51      	ldr	r3, [pc, #324]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4b50      	ldr	r3, [pc, #320]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 8002798:	21e0      	movs	r1, #224	@ 0xe0
 800279a:	00c9      	lsls	r1, r1, #3
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b4d      	ldr	r3, [pc, #308]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	22f0      	movs	r2, #240	@ 0xf0
 80027a6:	4393      	bics	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	4b4a      	ldr	r3, [pc, #296]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2201      	movs	r2, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	d04c      	beq.n	8002858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b44      	ldr	r3, [pc, #272]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	4013      	ands	r3, r2
 80027d0:	d120      	bne.n	8002814 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07a      	b.n	80028cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b3e      	ldr	r3, [pc, #248]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	049b      	lsls	r3, r3, #18
 80027e6:	4013      	ands	r3, r2
 80027e8:	d114      	bne.n	8002814 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06e      	b.n	80028cc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80027f6:	4b38      	ldr	r3, [pc, #224]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 80027f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	029b      	lsls	r3, r3, #10
 80027fe:	4013      	ands	r3, r2
 8002800:	d108      	bne.n	8002814 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e062      	b.n	80028cc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e05b      	b.n	80028cc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002814:	4b30      	ldr	r3, [pc, #192]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2203      	movs	r2, #3
 800281a:	4393      	bics	r3, r2
 800281c:	0019      	movs	r1, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4b2d      	ldr	r3, [pc, #180]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7fe fb64 	bl	8000ef4 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002830:	e009      	b.n	8002846 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002832:	f7fe fb5f 	bl	8000ef4 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	4a27      	ldr	r2, [pc, #156]	@ (80028dc <HAL_RCC_ClockConfig+0x1a4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e042      	b.n	80028cc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b24      	ldr	r3, [pc, #144]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	220c      	movs	r2, #12
 800284c:	401a      	ands	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1ec      	bne.n	8002832 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <HAL_RCC_ClockConfig+0x19c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d211      	bcs.n	800288a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <HAL_RCC_ClockConfig+0x19c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2201      	movs	r2, #1
 800286c:	4393      	bics	r3, r2
 800286e:	0019      	movs	r1, r3
 8002870:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <HAL_RCC_ClockConfig+0x19c>)
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_RCC_ClockConfig+0x19c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e020      	b.n	80028cc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d009      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a11      	ldr	r2, [pc, #68]	@ (80028e0 <HAL_RCC_ClockConfig+0x1a8>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028a8:	f000 f820 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028ac:	0001      	movs	r1, r0
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_RCC_ClockConfig+0x1a0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	220f      	movs	r2, #15
 80028b6:	4013      	ands	r3, r2
 80028b8:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <HAL_RCC_ClockConfig+0x1ac>)
 80028ba:	5cd3      	ldrb	r3, [r2, r3]
 80028bc:	000a      	movs	r2, r1
 80028be:	40da      	lsrs	r2, r3
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_RCC_ClockConfig+0x1b0>)
 80028c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe facf 	bl	8000e68 <HAL_InitTick>
  
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40022000 	.word	0x40022000
 80028d8:	40021000 	.word	0x40021000
 80028dc:	00001388 	.word	0x00001388
 80028e0:	fffff8ff 	.word	0xfffff8ff
 80028e4:	08003764 	.word	0x08003764
 80028e8:	20000000 	.word	0x20000000

080028ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002906:	4b2d      	ldr	r3, [pc, #180]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	220c      	movs	r2, #12
 8002910:	4013      	ands	r3, r2
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d046      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002916:	d848      	bhi.n	80029aa <HAL_RCC_GetSysClockFreq+0xbe>
 8002918:	2b04      	cmp	r3, #4
 800291a:	d002      	beq.n	8002922 <HAL_RCC_GetSysClockFreq+0x36>
 800291c:	2b08      	cmp	r3, #8
 800291e:	d003      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x3c>
 8002920:	e043      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002922:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002924:	613b      	str	r3, [r7, #16]
      break;
 8002926:	e043      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	0c9b      	lsrs	r3, r3, #18
 800292c:	220f      	movs	r2, #15
 800292e:	4013      	ands	r3, r2
 8002930:	4a24      	ldr	r2, [pc, #144]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002936:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	220f      	movs	r2, #15
 800293c:	4013      	ands	r3, r2
 800293e:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	23c0      	movs	r3, #192	@ 0xc0
 8002948:	025b      	lsls	r3, r3, #9
 800294a:	401a      	ands	r2, r3
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	025b      	lsls	r3, r3, #9
 8002950:	429a      	cmp	r2, r3
 8002952:	d109      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	481a      	ldr	r0, [pc, #104]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002958:	f7fd fbd6 	bl	8000108 <__udivsi3>
 800295c:	0003      	movs	r3, r0
 800295e:	001a      	movs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4353      	muls	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e01a      	b.n	800299e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	23c0      	movs	r3, #192	@ 0xc0
 800296c:	025b      	lsls	r3, r3, #9
 800296e:	401a      	ands	r2, r3
 8002970:	23c0      	movs	r3, #192	@ 0xc0
 8002972:	025b      	lsls	r3, r3, #9
 8002974:	429a      	cmp	r2, r3
 8002976:	d109      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4814      	ldr	r0, [pc, #80]	@ (80029cc <HAL_RCC_GetSysClockFreq+0xe0>)
 800297c:	f7fd fbc4 	bl	8000108 <__udivsi3>
 8002980:	0003      	movs	r3, r0
 8002982:	001a      	movs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4353      	muls	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e008      	b.n	800299e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	480c      	ldr	r0, [pc, #48]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002990:	f7fd fbba 	bl	8000108 <__udivsi3>
 8002994:	0003      	movs	r3, r0
 8002996:	001a      	movs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4353      	muls	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	613b      	str	r3, [r7, #16]
      break;
 80029a2:	e005      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_GetSysClockFreq+0xe0>)
 80029a6:	613b      	str	r3, [r7, #16]
      break;
 80029a8:	e002      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029aa:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029ac:	613b      	str	r3, [r7, #16]
      break;
 80029ae:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029b0:	693b      	ldr	r3, [r7, #16]
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b006      	add	sp, #24
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	40021000 	.word	0x40021000
 80029c0:	007a1200 	.word	0x007a1200
 80029c4:	08003774 	.word	0x08003774
 80029c8:	08003784 	.word	0x08003784
 80029cc:	02dc6c00 	.word	0x02dc6c00

080029d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	025b      	lsls	r3, r3, #9
 80029e8:	4013      	ands	r3, r2
 80029ea:	d100      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029ec:	e08e      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	2017      	movs	r0, #23
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029f8:	69da      	ldr	r2, [r3, #28]
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	055b      	lsls	r3, r3, #21
 80029fe:	4013      	ands	r3, r2
 8002a00:	d110      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a08:	2180      	movs	r1, #128	@ 0x80
 8002a0a:	0549      	lsls	r1, r1, #21
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	61da      	str	r2, [r3, #28]
 8002a10:	4b67      	ldr	r3, [pc, #412]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	055b      	lsls	r3, r3, #21
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d11a      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a30:	4b60      	ldr	r3, [pc, #384]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a36:	2180      	movs	r1, #128	@ 0x80
 8002a38:	0049      	lsls	r1, r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fa59 	bl	8000ef4 <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	e008      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fa54 	bl	8000ef4 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	@ 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0a6      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b56      	ldr	r3, [pc, #344]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a66:	4b52      	ldr	r3, [pc, #328]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a68:	6a1a      	ldr	r2, [r3, #32]
 8002a6a:	23c0      	movs	r3, #192	@ 0xc0
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d034      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	23c0      	movs	r3, #192	@ 0xc0
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4013      	ands	r3, r2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d02c      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a88:	4b49      	ldr	r3, [pc, #292]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a4a      	ldr	r2, [pc, #296]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a98:	2180      	movs	r1, #128	@ 0x80
 8002a9a:	0249      	lsls	r1, r1, #9
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa0:	4b43      	ldr	r3, [pc, #268]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aa2:	6a1a      	ldr	r2, [r3, #32]
 8002aa4:	4b42      	ldr	r3, [pc, #264]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aa6:	4945      	ldr	r1, [pc, #276]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aac:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aba:	f7fe fa1b 	bl	8000ef4 <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fa16 	bl	8000ef4 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	4a3c      	ldr	r2, [pc, #240]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e067      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	4b35      	ldr	r3, [pc, #212]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae2:	4b33      	ldr	r3, [pc, #204]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a34      	ldr	r2, [pc, #208]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002af2:	430a      	orrs	r2, r1
 8002af4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af6:	2317      	movs	r3, #23
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b06:	492f      	ldr	r1, [pc, #188]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	4013      	ands	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b16:	4b26      	ldr	r3, [pc, #152]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b26:	430a      	orrs	r2, r1
 8002b28:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	4013      	ands	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b34:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b38:	4a23      	ldr	r2, [pc, #140]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b44:	430a      	orrs	r2, r1
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b52:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	2210      	movs	r2, #16
 8002b58:	4393      	bics	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b62:	430a      	orrs	r2, r1
 8002b64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	029b      	lsls	r3, r3, #10
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b72:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	2280      	movs	r2, #128	@ 0x80
 8002b78:	4393      	bics	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b82:	430a      	orrs	r2, r1
 8002b84:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	2240      	movs	r2, #64	@ 0x40
 8002b98:	4393      	bics	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b006      	add	sp, #24
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	fffffcff 	.word	0xfffffcff
 8002bbc:	fffeffff 	.word	0xfffeffff
 8002bc0:	00001388 	.word	0x00001388
 8002bc4:	efffffff 	.word	0xefffffff
 8002bc8:	fffcffff 	.word	0xfffcffff

08002bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0a8      	b.n	8002d30 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	2382      	movs	r3, #130	@ 0x82
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d009      	beq.n	8002c06 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	61da      	str	r2, [r3, #28]
 8002bf8:	e005      	b.n	8002c06 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	225d      	movs	r2, #93	@ 0x5d
 8002c10:	5c9b      	ldrb	r3, [r3, r2]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	225c      	movs	r2, #92	@ 0x5c
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7fd ffb8 	bl	8000b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	225d      	movs	r2, #93	@ 0x5d
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2140      	movs	r1, #64	@ 0x40
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	23e0      	movs	r3, #224	@ 0xe0
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d902      	bls.n	8002c52 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e002      	b.n	8002c58 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c52:	2380      	movs	r3, #128	@ 0x80
 8002c54:	015b      	lsls	r3, r3, #5
 8002c56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	23f0      	movs	r3, #240	@ 0xf0
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d008      	beq.n	8002c76 <HAL_SPI_Init+0xaa>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	23e0      	movs	r3, #224	@ 0xe0
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	2382      	movs	r3, #130	@ 0x82
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	401a      	ands	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6899      	ldr	r1, [r3, #8]
 8002c84:	2384      	movs	r3, #132	@ 0x84
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	400b      	ands	r3, r1
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2102      	movs	r1, #2
 8002c92:	400b      	ands	r3, r1
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	400b      	ands	r3, r1
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6999      	ldr	r1, [r3, #24]
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	400b      	ands	r3, r1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	2138      	movs	r1, #56	@ 0x38
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	2180      	movs	r1, #128	@ 0x80
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	0011      	movs	r1, r2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	019b      	lsls	r3, r3, #6
 8002cca:	401a      	ands	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	2204      	movs	r2, #4
 8002cdc:	401a      	ands	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	2110      	movs	r1, #16
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cec:	2108      	movs	r1, #8
 8002cee:	400b      	ands	r3, r1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	23f0      	movs	r3, #240	@ 0xf0
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	0011      	movs	r1, r2
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	015b      	lsls	r3, r3, #5
 8002d06:	401a      	ands	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4907      	ldr	r1, [pc, #28]	@ (8002d38 <HAL_SPI_Init+0x16c>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	225d      	movs	r2, #93	@ 0x5d
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b004      	add	sp, #16
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	fffff7ff 	.word	0xfffff7ff

08002d3c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e074      	b.n	8002e38 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	223c      	movs	r2, #60	@ 0x3c
 8002d52:	5c9b      	ldrb	r3, [r3, r2]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	223d      	movs	r2, #61	@ 0x3d
 8002d5e:	2100      	movs	r1, #0
 8002d60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7fd ff65 	bl	8000c34 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	223c      	movs	r2, #60	@ 0x3c
 8002d6e:	2102      	movs	r1, #2
 8002d70:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002d88:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002d90:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002d96:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002d9c:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002da2:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         htsc->Init.MaxCountValue |
 8002da8:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         htsc->Init.SynchroPinPolarity |
 8002dae:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7b1b      	ldrb	r3, [r3, #12]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d108      	bne.n	8002dd2 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2180      	movs	r1, #128	@ 0x80
 8002dcc:	0249      	lsls	r1, r1, #9
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	43d2      	mvns	r2, r2
 8002de8:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e02:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681c      	ldr	r4, [r3, #0]
 8002e0c:	0010      	movs	r0, r2
 8002e0e:	f000 f817 	bl	8002e40 <TSC_extract_groups>
 8002e12:	0003      	movs	r3, r0
 8002e14:	6323      	str	r3, [r4, #48]	@ 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2103      	movs	r1, #3
 8002e22:	438a      	bics	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	223c      	movs	r2, #60	@ 0x3c
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b003      	add	sp, #12
 8002e3e:	bd90      	pop	{r4, r7, pc}

08002e40 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	e011      	b.n	8002e76 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	409a      	lsls	r2, r3
 8002e5a:	0013      	movs	r3, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d006      	beq.n	8002e70 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002e62:	2201      	movs	r2, #1
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	409a      	lsls	r2, r3
 8002e68:	0013      	movs	r3, r2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	3301      	adds	r3, #1
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b07      	cmp	r3, #7
 8002e7a:	d9ea      	bls.n	8002e52 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <USB_DisableGlobalInt+0x30>)
 8002e92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2240      	movs	r2, #64	@ 0x40
 8002e98:	5a9b      	ldrh	r3, [r3, r2]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	43d2      	mvns	r2, r2
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b299      	uxth	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b004      	add	sp, #16
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	0000bf80 	.word	0x0000bf80

08002ebc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	6019      	str	r1, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2240      	movs	r2, #64	@ 0x40
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2240      	movs	r2, #64	@ 0x40
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2244      	movs	r2, #68	@ 0x44
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2250      	movs	r2, #80	@ 0x50
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <memset>:
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	1882      	adds	r2, r0, r2
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d100      	bne.n	8002efe <memset+0xa>
 8002efc:	4770      	bx	lr
 8002efe:	7019      	strb	r1, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	e7f9      	b.n	8002ef8 <memset+0x4>

08002f04 <__libc_init_array>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	2600      	movs	r6, #0
 8002f08:	4c0c      	ldr	r4, [pc, #48]	@ (8002f3c <__libc_init_array+0x38>)
 8002f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8002f40 <__libc_init_array+0x3c>)
 8002f0c:	1b64      	subs	r4, r4, r5
 8002f0e:	10a4      	asrs	r4, r4, #2
 8002f10:	42a6      	cmp	r6, r4
 8002f12:	d109      	bne.n	8002f28 <__libc_init_array+0x24>
 8002f14:	2600      	movs	r6, #0
 8002f16:	f000 f819 	bl	8002f4c <_init>
 8002f1a:	4c0a      	ldr	r4, [pc, #40]	@ (8002f44 <__libc_init_array+0x40>)
 8002f1c:	4d0a      	ldr	r5, [pc, #40]	@ (8002f48 <__libc_init_array+0x44>)
 8002f1e:	1b64      	subs	r4, r4, r5
 8002f20:	10a4      	asrs	r4, r4, #2
 8002f22:	42a6      	cmp	r6, r4
 8002f24:	d105      	bne.n	8002f32 <__libc_init_array+0x2e>
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	00b3      	lsls	r3, r6, #2
 8002f2a:	58eb      	ldr	r3, [r5, r3]
 8002f2c:	4798      	blx	r3
 8002f2e:	3601      	adds	r6, #1
 8002f30:	e7ee      	b.n	8002f10 <__libc_init_array+0xc>
 8002f32:	00b3      	lsls	r3, r6, #2
 8002f34:	58eb      	ldr	r3, [r5, r3]
 8002f36:	4798      	blx	r3
 8002f38:	3601      	adds	r6, #1
 8002f3a:	e7f2      	b.n	8002f22 <__libc_init_array+0x1e>
 8002f3c:	08003794 	.word	0x08003794
 8002f40:	08003794 	.word	0x08003794
 8002f44:	08003798 	.word	0x08003798
 8002f48:	08003794 	.word	0x08003794

08002f4c <_init>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr

08002f58 <_fini>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr
